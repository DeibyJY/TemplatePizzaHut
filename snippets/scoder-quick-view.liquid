{%- liquid
  assign primera_coleccion = collections | first

  assign layout = settings.quick_view_layout
  assign max_thumbnail_to_show = settings.thumbnail_to_show
  assign current_variant = product.selected_or_first_available_variant
  assign variantCount = product.variants | size
  assign featured_media_aspect_ratio = product.featured_media.aspect_ratio
  if product.featured_media.aspect_ratio == null
    assign featured_media_aspect_ratio = 1
  endif
  assign media_size = settings.quick_view_product_image_ratio
  assign portrait_aspect_ratio = settings.quick_view_portrait_aspect_ratio | append: '%'
  assign quick_view_zoomed_image = settings.quick_view_zoomed_image
  assign show_quick_view_badge = settings.show_quick_view_badge
  assign fontsize_text = settings.fontsize_text
  assign color_title = settings.color_title
  assign show_quick_view_review = settings.show_quick_view_review
  assign word_number_short_desc = settings.word_number_short_desc
  assign fontsize_short_desc = settings.fontsize_short_desc
  assign color_short_desc = settings.color_short_desc
  assign show_quick_view_sold_in = settings.show_quick_view_sold_in
  if show_quick_view_sold_in
    assign quick_view_sold_in_number = settings.quick_view_sold_in_number
    assign quick_view_sold_in_hours = settings.quick_view_sold_in_hours
  endif
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign fontsize_price = settings.fontsize_price
  assign show_countdown = settings.show_countdown
  if show_countdown
    assign countdown_type = settings.countdown_type
    assign countdown_time = settings.countdown_time
    assign countdown_collection = settings.countdown_collection | downcase | handle
    assign countdown_style = settings.countdown_style
  endif
  assign show_quick_view_vendor = settings.show_quick_view_vendor
  assign show_quick_view_availability = settings.show_quick_view_availability
  assign show_quick_view_sku = settings.show_quick_view_sku
  assign show_quick_view_product_type = settings.show_quick_view_product_type
  assign quick_view_picker_type = settings.quick_view_picker_type
  assign stock_level_display = settings.stock_level_display
  assign show_hot_stock = settings.show_hot_stock
  if show_hot_stock
    assign productMaxStock = settings.hot_stock_limit | plus: 0
  endif
  assign show_quick_view_qty = settings.show_quick_view_qty
  assign show_quick_view_subtotal = settings.show_quick_view_subtotal
  assign show_subtotal = false
  assign subtotal = 0
  if show_quick_view_subtotal and show_quick_view_qty
    assign show_subtotal = true
    assign subtotal = current_variant.price | money
  endif
  assign show_dynamic_checkout = settings.show_dynamic_checkout
  assign show_quick_view_customer_viewing = settings.show_quick_view_customer_viewing
  if show_quick_view_customer_viewing
    assign quick_view_customer_viewing_number = settings.quick_view_customer_viewing_number
    assign quick_view_customer_viewing_time = settings.quick_view_customer_viewing_time
  endif
  assign show_quick_view_trust_image = settings.show_quick_view_trust_image
  assign show_quick_view_share = settings.show_quick_view_share
  if show_quick_view_share
    assign share_product_script = settings.share_product_script
  endif

  assign show_customization_option = settings.show_customization_option
  if show_customization_option
    assign has_customization_option = false
    assign customization_option_type = settings.customization_option_type
    assign customization_option_hidden = settings.customization_option_hidden
    if customization_option_type == 'all'
      assign has_customization_option = true
    elsif customization_option_type == 'tag'
      assign customization_option_tags = settings.customization_option_tags | downcase | strip | split: ','
      for tag in customization_option_tags
        assign tagtitle = tag | strip
        assign productTag = product.tags | downcase
        if productTag contains tagtitle
          assign has_customization_option = true
        endif
      endfor
    elsif customization_option_type == 'collection'
      assign customization_option_collection = settings.customization_option_collection | downcase | handle
      if customization_option_collection != blank
        for collection in product.collections
          assign collection_title = collection.title | downcase | handle
          if collection_title == customization_option_collection
            assign has_customization_option = true
          endif
        endfor
      endif
    endif
    assign customization_option_1 = settings.customization_option_1
    assign customization_option_2 = settings.customization_option_2
  endif
  assign show_quick_view_variant_image_group = settings.show_quick_view_variant_image_group
-%}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{
      padding-bottom: {{ portrait_aspect_ratio }};
  }
</style>
{{ 'component-product-form.css' | asset_url | stylesheet_tag }}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{padding-bottom: {{ portrait_aspect_ratio }}}
  {% if settings.button_hover_style == '2' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);;
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-action .button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-action .button:hover {
        color: var(--atc-color-hover);
        background: var(--atc-bg-color-hover);
        border-color: var(--atc-border-color-hover);
    }
  {% endif %}
  {% if settings.button_hover_style == '2' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        background: var(--bin-bg-color-hover);
        border-color: var(--bin-border-color-hover);
        box-shadow: unset;
    }
  {% endif %}
</style>
{%- if variantCount > 0 and product.has_only_default_variant != true -%}
  <script>
    window.quick_view_inven_array_{{ product.id }} = {
        {% for variant in product.variants %}
            '{{ variant.id }}': '{{ variant.inventory_quantity }}',
        {% endfor %}
    };
  </script>
{%- endif -%}
<script>
    window.quick_view_subtotal = {
        show: {{ show_subtotal }},
        text: `{{ 'products.product.sub_total' | t : value : '[value]' }}`
    };
    window.quick_view_selling_array_{{ product.id }} = {
      {% for variant in product.variants %}
          '{{ variant.id }}': '{{ variant.inventory_policy }}',
      {% endfor %}
   };
</script>

<div
  class="productView quickView scoder-quickView layout-{{ layout }}{% if product.media.size == 0 %} productView-no-media{% endif %}"
  data-product-quickview-handle="{{ product.handle }}"
>
  <div
    style="display: flex !important; width: 100% !important; height: 80vh !important; gap: 10px !important; margin: 0 !important; padding: 0 !important; overflow: hidden !important;"
    class="productView-top"
  >
    <div
      style="flex: 0 0 40% !important; height: 100% !important; overflow: hidden !important; display: flex !important; flex-direction: column !important; padding: 15px !important;"
      class="detalle-producto-left"
    >
      {% comment %} IMAGEN 50% {% endcomment %}
      <div
        style="width: 100% !important; height: 50% !important; flex: 0 0 50% !important; display: flex !important; align-items: center !important; justify-content: center !important; position: relative !important; overflow: hidden !important;"
        class="image-producto"
      >
        {%- for media in product.media limit: 1 -%}
          {%- case media.media_type -%}
            {%- when 'image' -%}
              <img
                id="product-featured-image-{{ media.id }}"
                style="width: 100% !important; height: 100% !important; object-fit: contain !important; display: block !important; margin: auto !important;"
                {% render 'lazyload', preview_img: media.preview_image, class: true %}
                title="{{ media.preview_image.alt | escape }}"
                data-main-image
              >
          {%- endcase -%}
        {%- endfor -%}
      </div>
      {% comment %} CONTENIDO INFORMACION PRODUCTO 50% {% endcomment %}
      <div
        style="
          width: 100% !important;
          height: 50% !important;
          flex: 0 0 50% !important;
          display: flex !important;
          flex-direction: column !important;
          align-items: center !important;
          justify-content: center !important;
        "
        class="informacion-producto-opciones"
      >
        {% comment %} READ : DETALLE DE PRODUCTO INICIO {% endcomment %}
        <div
          class="detalle-producto"
          style="
            display: flex !important;
            flex-direction: column !important;
            gap: 2px !important;
            padding: 0 !important;
            margin: 0 !important;
          "
        >
          <h2
            class="productView-title"
            style="--color-title: {{ color_title }};--fontsize-text: {{ fontsize_text | append: 'px' }}"
          >
            {% comment %} <a href="{{ product.url }}">{{ product.title | escape }}</a> {% endcomment %}
            {% comment %} {{ product.category }} {% endcomment %}
            {% for product in primera_coleccion.products %}
              <li>{{ product.title }}</li>
            {% else %}
              <li>No hay productos en esta colección.</li>
            {% endfor %}
          </h2>
          {% comment %}Método 2: Todas las colecciones de la tienda{% endcomment %}
          {% for collection in collections %}
            {{ collection.title }}
            {% unless forloop.last %}, {% endunless %}
          {% endfor %}

          {%- if show_quick_view_short_description -%}
            {%- liquid
              assign desc = product.description
            -%}
            {%- if desc != blank -%}
              <div
                class="productView-desc scoder-text-format"
                style="--color_short_desc: {{ color_short_desc }};--fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
              >
                {{ desc | truncatewords: word_number_short_desc }}
              </div>
            {%- endif -%}
          {%- endif -%}
          <div
            class="productView-price no-js-hidden clearfix"
            id="product-quick-view-price-{{ product.id }}"
            style="--fontsize-text: {{ fontsize_price | append: 'px' }};"
          >
            {%- render 'price', product: product, use_variant: true, price_class: 'price--medium' -%}
          </div>
          {%- if show_quick_view_qty -%}
            <div
              class="quantity_selector productView-groupTop"
              style="
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: wrap !important;
                align-items: end !important;
              "
            >
              <quantity-quick-view-input class="productView-quantity quantity__group quantity__group--2 quantity__style--1 clearfix">
                <label class="form-label quantity__label" for="quantity-{{ product.id }}-2">
                  {{- 'products.product.quantity.label__2' | t -}}
                </label>
                <div class="quantity__container">
                  <button type="button" name="minus" class="minus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                    </span>
                  </button>
                  <input
                    class="form-input quantity__input quantity"
                    type="number"
                    name="quantity"
                    min="1"
                    value="1"
                    inputmode="numeric"
                    pattern="[0-9]*"
                    id="quantity-{{ product.id }}-2"
                    data-product="{{ product.id }}"
                    data-price="{{ current_variant.price }}"
                    data-inventory-quantity="{{ current_variant.inventory_quantity }}"
                  >
                  <button type="button" name="plus" class="plus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                    </span>
                  </button>
                </div>
              </quantity-quick-view-input>
              {%- if settings.show_wishlist -%}
                <div class="productView-wishlist clearfix">
                  <a
                    data-wishlist
                    href="#"
                    data-wishlist-handle="{{ product.handle }}"
                    data-product-id="{{ product.id }}"
                    ><span class="visually-hidden">{{ 'wishlist.general.add' | t }}</span> {% render 'icon-heart' -%}
                  </a>
                </div>
              {%- endif -%}
              {%- if show_quick_view_share -%}
                {% render 'scoder-share', product: product, share_layout: '2' %}
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
        {% comment %} READ : DETALLE DE PRODUCTO FIN {% endcomment %}
      </div>
    </div>

    <div class="detalle-producto-right">
      {% comment %} OPCIONES DIFERENCIA DEL PRODUCTO INICIO {% endcomment %}
      <div class="opciontes-seleccion-cliente">
        <h2 class="productView-title">PERSONALIZAR EL ÍTEM</h2>
        <div class="productView-product">
          {% comment %} OPCIONES DE PRODUCTOS INICIO {% endcomment %}
          <div class="sector-general-opciones-producto">
            {% comment %} <div class="menu-item-producto"></div> {% endcomment %}
          </div>
          {% comment %} OPCIONES DE PRODUCTOS FIN {% endcomment %}
        </div>
      </div>
      {% comment %} OPCIONES DIFERENCIA DEL PRODUCTO FIN {% endcomment %}
      {% comment %} ACCION PARA EL CLIENTE INICIO {% endcomment %}
      <div
        style="
          height: 10.3% !important;
          width: 100% !important;
          background-color: #2196F3 !important;
        "
        class="acciones-cliente"
      >
        <div class="productView-options">
          {%- assign product_form_installment_id = 'product-quick-view-form-installment-' | append: product.id -%}
          {%- form 'product', product, id: product_form_installment_id, class: 'installment caption-large' -%}
            <input type="hidden" name="id" value="{{ current_variant.id }}">
            {{ form | payment_terms }}
          {%- endform -%}
          <div
            class="productView-variants scoder-productOptions"
            id="product-quick-view-option-{{ product.id }}"
            data-type="{{ quick_view_picker_type }}"
          >
            {%- if variantCount > 0 and product.has_only_default_variant != true -%}
              {%- if quick_view_picker_type == 'button' -%}
                {%- assign product_swatch_option = settings.swatch | downcase -%}
                <variant-quick-view-radios
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    {%- liquid
                      assign is_swatch = false
                      assign option_name = option.name | downcase
                      if product_swatch_option contains option_name
                        assign is_swatch = true
                      endif
                      assign swatch_type = settings.swatch_type
                      assign option_index = forloop.index0
                    -%}
                    <fieldset
                      class="js product-form__input{% if is_swatch %} product-form__swatch{% endif %} clearfix"
                      data-product-attribute="set-rectangle"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <legend class="form__label">
                        {{ option.name | append: ':' }}
                        <span data-header-option>
                          {{ option.selected_value }}
                        </span>
                      </legend>
                      {%- assign values = '' -%}
                      {%- liquid
                        assign variants_available_arr = product.variants | map: 'available'
                        assign variants_option1_arr = product.variants | map: 'option1'
                        assign variants_option2_arr = product.variants | map: 'option2'
                        assign variants_option3_arr = product.variants | map: 'option3'
                      -%}
                      {%- for variant in product.variants -%}
                        {%- assign value = variant.options[option_index] -%}
                        {%- unless values contains value -%}
                          {%- liquid
                            assign values = values | join: ';'
                            assign values = values | append: ';' | append: value
                            assign values = values | split: ';'
                            assign option_stock = 'soldout'

                            for option1_name in variants_option1_arr
                              case option.position
                                when 1
                                  if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 2
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 3
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                              endcase
                            endfor
                          -%}
                          <input
                            class="product-form__radio"
                            type="radio"
                            id="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            name="{{ option.name }}"
                            value="{{ value | escape }}"
                            {% if option.selected_value == value %}
                              checked
                            {% endif -%}
                            {% if settings.show_quick_view_variant_image_group %}
                              data-filter=".filter-{{ value | handle }}"
                            {% endif %}
                          >
                          {%- if is_swatch -%}
                            {%- liquid
                              assign enable_variant_image = false
                              case swatch_type
                                when 'variant_image'
                                  assign background_image = variant.image.src | product_img_url: '40x'
                                  if variant.image
                                    assign enable_variant_image = true
                                  endif
                                when 'color'
                                  assign background_image = value | handle | append: '.png' | file_url
                                  assign enable_variant_image = true
                                when 'metafields'
                                  assign variant_color = variant.metafields.custom.variant_color
                                  assign color_codes = false

                                  if variant_color
                                    assign enable_variant_image = true

                                    if variant_color contains '#' or variant_color contains 'rgb' or variant_color contains 'hsl'
                                      assign color_codes = true
                                      assign background_color = variant_color
                                    else
                                      assign background_image = variant_color | append: '.png' | file_url
                                    endif
                                  elsif variant.image
                                    assign enable_variant_image = true
                                    assign background_image = variant.image.src | product_img_url: '40x'
                                  endif
                              endcase
                            -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            >
                              <span
                                class="pattern"
                                style="background-color: {{ value | split: ' ' | last | handle }};{% if enable_variant_image %}{% if swatch_type == 'metafields' %}{% if color_codes %} background: {{ background_color }}{% else %} background: url({{ background_image }}); background-size: cover;{% endif %}{% else %} background-image: url({{ background_image }});{% endif %}{% endif %}"
                              ></span>
                            </label>
                          {%- else -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                              ><span class="text">{{ value }}</span></label
                            >
                          {%- endif -%}
                        {%- endunless -%}
                      {%- endfor -%}
                    </fieldset>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-radios>
              {%- else -%}
                <variant-quick-view-selects
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    <div
                      class="product-form__input product-form__input--dropdown"
                      data-product-attribute="set-select"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <label class="form__label" for="option-quick-view-{{ forloop.index0 }}">
                        {{- option.name | append: ':' }}
                        <span data-header-option>{{ option.selected_value }}</span></label
                      >
                      <div class="form__select select">
                        <select
                          id="option-quick-view-{{ forloop.index0 }}"
                          class="select__select"
                          name="options[{{ option.name | escape }}]"
                        >
                          {%- for value in option.values -%}
                            <option
                              value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                                selected="selected"
                              {% endif %}
                            >
                              {{ value }}
                            </option>
                          {%- endfor -%}
                        </select>
                      </div>
                    </div>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-selects>
              {%- endif -%}
              {%- if show_hot_stock -%}
                <div class="productView-hotStock" data-hot-stock="{{ productMaxStock }}">
                  {%- if current_variant.inventory_management -%}
                    {%- if current_variant.inventory_quantity > 0
                      and current_variant.inventory_quantity <= productMaxStock
                    -%}
                      {{ 'products.product.hot_stock' | t: inventory: current_variant.inventory_quantity }}
                    {%- endif -%}
                  {%- endif -%}
                </div>
              {%- endif -%}
            {%- endif -%}
          </div>
          <noscript>
            <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
              <label class="form__label" for="Variants-{{ section.id }}">
                {{- 'products.product.product_variants' | t -}}
              </label>
              <div class="select">
                <select name="id" id="Variants-{{ section.id }}" class="select__select" form="product-form">
                  {%- for variant in product.variants -%}
                    <option
                      {% if variant == product.selected_or_first_available_variant %}
                        selected="selected"
                      {% endif %}
                      {% if variant.available == false %}
                        disabled
                      {% endif %}
                      value="{{ variant.id }}"
                    >
                      {{ variant.title }}
                      {%- if variant.available == false %} - {{ 'products.product.sold_out' | t }}{% endif %}
                      - {{ variant.price | money | strip_html }}
                    </option>
                  {%- endfor -%}
                </select>
              </div>
            </div>
          </noscript>
          {%- assign product_form_id = 'product-quick-view-form-' | append: product.id -%}
          {%- form 'product',
            product,
            id: product_form_id,
            class: 'form productView-action',
            novalidate: 'novalidate',
            data-type: 'add-to-cart-form'
          -%}
            {% comment %} <div class="productView-message" style="display: none;"></div> {% endcomment %}
            <div
              class="productView-group"
              style="
                display: flex !important;
                flex-direction: row !important;
                gap : 1% !important;
              "
            >
              <div
                class="productView-groupTop"
              >
                <div
                  class="productView-action{% unless settings.show_wishlist %} productView-action-2{% endunless %}"
                  style="--atc-color: #ffffff;--atc-bg-color: #232323;--atc-border-color: #232323;--atc-color-hover: #232323;--atc-bg-color-hover: #ffffff;--atc-border-color-hover: #232323"
                >
                  <input type="hidden" name="id" value="{{ current_variant.id }}">
                  <div class="product-form__buttons">
                    {%- if current_variant.available -%}
                      {%- if current_variant.inventory_management -%}
                        {%- assign first_inventory = current_variant.inventory_quantity -%}
                        {%- liquid
                          if current_variant.available and first_inventory == 0
                            assign allowOutStockSale = true
                          else
                            assign allowOutStockSale = false
                          endif
                        -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          data-available="{{ allowOutStockSale }}"
                          class="product-form__submit button button--primary{% if first_inventory == 0 %} button-text-change{% else %}{% if show_subtotal_text %} button-text-change{% endif %}{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if first_inventory > 0 -%}
                            {%- if show_subtotal_text and subtotal_style == '2' -%}
                              {%- assign subtotal = subtotal | strip_html -%}
                              {{ 'products.product.sub_total' | t: value: subtotal }}
                            {%- else -%}
                              {{ 'products.product.add_to_cart' | t }}
                            {%- endif -%}
                          {%- else -%}
                            {{ 'products.product.pre_order' | t }}
                          {%- endif -%}
                        </button>
                      {%- else -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          class="product-form__submit button button--secondary{% if show_subtotal_text %} button-text-change{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if show_subtotal_text and subtotal_style == '2' -%}
                            {%- assign subtotal = subtotal | strip_html -%}
                            {{ 'products.product.sub_total' | t: value: subtotal }}
                          {%- else -%}
                            {{ 'products.product.add_to_cart' | t }}
                          {%- endif -%}
                        </button>
                      {%- endif -%}
                    {%- else -%}
                      <button
                        type="submit"
                        name="add"
                        data-btn-addToCart

                        class="product-form__submit button"
                        id="product-add-to-cart"
                        disabled
                      >
                        {{ 'products.product.sold_out' | t }}
                      </button>
                    {%- endif -%}
                  </div>
                </div>
              </div>
              {%- if show_dynamic_checkout -%}
                <div class="productView-groupBottom">
                  <div class="productView-groupItem">
                    <div
                      class="productView-payment"
                      id="product-checkout-{{ product.id }}"
                      style="--bin-color: #232323;--bin-bg-color: #ffffff;--bin-border-color: #acacac;--bin-color-hover: #ffffff;--bin-bg-color-hover: #232323;--bin-border-color-hover: #232323"
                    >
                      {{ form | payment_button }}
                    </div>
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endform -%}
          {%- if show_quick_view_customer_viewing or show_quick_view_trust_image -%}
            <div class="productView-more">
              {%- if show_quick_view_customer_viewing -%}
                <div class="productView-moreItem">
                  <div
                    class="productView-ViewingProduct"
                    data-customer-view="{{ quick_view_customer_viewing_number }}"
                    data-customer-view-time="{{ quick_view_customer_viewing_time }}"
                  >
                    {% render 'icon-eyes-2' %}
                    <span class="text">{{ 'customer_viewing.general.text' | t: number: '10' }}</span>
                  </div>
                </div>
              {%- endif -%}
              {%- if show_quick_view_trust_image -%}
                <div class="productView-moreItem">
                  <div class="productView-securityImage">
                    {%- render 'scoder-trust-image', type: 'product' -%}
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
      </div>
      {% comment %} ACCION PARA EL CLIENTE FIN {% endcomment %}
    </div>
  </div>
</div>
{%- if show_size_chart and has_size_chart -%}
  {% render 'scoder-size-chart-popup',
    product: product,
    size_chart_type: size_chart_type,
    size_chart_image: size_chart_image
  %}
{%- endif -%}
{%- if show_compare_color and isColor -%}
  {% render 'scoder-compare-color-popup',
    product: product,
    show_compare_color_drop_drap: show_compare_color_drop_drap,
    index: index
  %}
{%- endif -%}

<script>
  // Token Acceso APP ADMIN API
  const myTest = 'shpat_' + '45f4a7476152f4881d058f87ce063698';
  
  // Obtener de las colecciones de los productos una [handle1,handle2,.....,handleN]
  const coleccionesOfProduct = () => {
    const collections = {{ product.collections | json }};
    return collections
        .filter(collection => {
            const title = collection.title;
            const openIndex = title.indexOf('(');
            const closeIndex = title.indexOf(')');
            return openIndex !== -1 && closeIndex !== -1 && openIndex < closeIndex;
        })
        .map(({ handle }) => handle);
  };

  // Creacion del Query para la consulta 
  function createQuery(){
    let query = '{\n';

    coleccionesOfProduct().forEach((handle, index) => {
        query += `  coleccion${index + 1}: collectionByHandle(handle: "${handle}") {
            title
            description
            products(first: 250) {
                edges {
                    node {
                        id
                        title
                        description
                        priceRange {
                            minVariantPrice {
                                amount
                                currencyCode
                            }
                        }
                        collections(first: 250) {
                            edges {
                                node {
                                    title
                                    description
                                }
                            }
                        }
                    }
                }
            }
        }\n`; 
    });

    query += '}';
    return query;
  }

  // Funcion de solicitud a la base de datos de shopify
  async function fetchShopifyData() {
    try {
        const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Access-Token': myTest
            },
            body: JSON.stringify({
                query: createQuery(),
                variables: {}
            })
        });
        
        const data = await response.json();
        {% comment %} console.log('Respuesta:', data); {% endcomment %}
        return data; // Añadimos el return aquí
    } catch (error) {
        console.error('Error:', error);
        return null; // También es buena práctica retornar algo en caso de error
    }
  }

  {% comment %} PASO 1 : ORDENADAR LAS COLECCIONES DEL PRODUCTO {% endcomment %}
  {% comment %} Función para limpiar el body_html en este caso es descripcion y obtener solo el texto {% endcomment %}
  function limpiarBodyHtml(html) {
    if (!html) return '';
    return html.replace(/<\/?p>/g, '').trim();
  }

  {% comment %} Funcion para extrae el Nivel  {% endcomment %}
  function obtenerNivel(text) {
    if(!text) return -1;  // Si no hay texto, devuelve -1
    
    // Busca "Nivel: X" donde X es número
    const nivelMatch = text.match(/Nivel\s*:\s*(\d+)/);  
    
    // Devuelve el número o -1 si no encuentra
    return nivelMatch ? parseInt(nivelMatch[1]) : -1;
    
    // Resultado :
    // obtenerNivel("Nivel: 5")  // → 5
    // obtenerNivel("")         // → -1
  }

  /**
  * Esta función procesa y organiza datos de una tienda Shopify:
  * 1. Clasifica las colecciones existentes en tres niveles (2, 3 y 4)
  * 2. Obtiene todos los productos de la tienda usando GraphQL
  * 3. Extrae y organiza la información de cada producto incluyendo:
  *    - Información básica (id, título, descripción)
  *    - Precios
  *    - Colecciones asociadas
  * 4. Evita duplicados de productos
  * 5. Muestra los resultados organizados en consola
  */

  async function testPrueba() {
    // Arrays para mantener la lógica original
    const coleccionNivel2 = [];
    const coleccionNivel4 = [];
    const coleccionNivel3 = [];
    const productosNivel2y3 = [];
    const productosNivel2y4 = [];
  
    // Set para verificación rápida de IDs duplicados
    const idsNivel2y3 = new Set();
    const idsNivel2y4 = new Set();
  
    // Validación de paréntesis
    const tieneParentesisValidos = (titulo) => {
      return titulo.includes('(') && titulo.includes(')') && 
             titulo.indexOf('(') < titulo.indexOf(')');
    };
  
    // Procesar colecciones existentes de manera más eficiente
    const collections = {{ product.collections | json }};
    
    for (const collection of collections) {
      const handle = collection.handle;
      const title = collection.title;
      const description = limpiarBodyHtml(collection.body_html);
      const nivel = obtenerNivel(description);
      
      // Solo agregar colecciones con paréntesis válidos
      if (!tieneParentesisValidos(title)) continue;
      
      if (nivel === 2) {
        coleccionNivel2.push({ handle, title, description });
      } else if (nivel === 4) {
        coleccionNivel4.push({ handle, title, description });
      } else if (nivel === 3) {
        coleccionNivel3.push({ handle, title, description });
      }
    }
  
    // Cache de títulos de colecciones para búsqueda más rápida
    const titulosNivel2 = new Set(coleccionNivel2.map(col => col.title));
    const titulosNivel3 = new Set(coleccionNivel3.map(col => col.title));
    const titulosNivel4 = new Set(coleccionNivel4.map(col => col.title));
  
    // Obtener datos de Shopify
    const respuesta = await fetchShopifyData();
    
    if (respuesta?.data) {
      for (const coleccion of Object.values(respuesta.data)) {
        if (!coleccion?.products?.edges) continue;
  
        for (const edge of coleccion.products.edges) {
          if (!edge?.node) continue;
  
          // Obtener todas las colecciones del producto
          const todasColecciones = edge.node.collections.edges.map(colEdge => ({
            title: colEdge.node.title,
            description: colEdge.node.description
          }));
  
          // Verificar que TODAS las colecciones tengan paréntesis válidos
          const todasTienenParentesis = todasColecciones.every(col => 
            tieneParentesisValidos(col.title)
          );
  
          // Si alguna colección no tiene paréntesis válidos, descartamos el producto
          if (!todasTienenParentesis) continue;
  
          const titulosProducto = new Set(todasColecciones.map(col => col.title));
  
          // Verificar nivel 2 (requerido para ambos casos)
          const cumpleNivel2 = Array.from(titulosNivel2).every(titulo => 
            titulosProducto.has(titulo)
          );
          
          if (!cumpleNivel2) continue;
  
          // Crear objeto producto solo si pasa la validación inicial
          const producto = {
            id: edge.node.id,
            title: edge.node.title,
            description: edge.node.description,
            price: {
              amount: edge.node.priceRange.minVariantPrice.amount,
              currencyCode: edge.node.priceRange.minVariantPrice.currencyCode
            },
            collections: todasColecciones
          };
  
          // Verificar nivel 2 y 3
          if (Array.from(titulosNivel3).every(titulo => titulosProducto.has(titulo))) {
            if (!idsNivel2y3.has(producto.id)) {
              idsNivel2y3.add(producto.id);
              productosNivel2y3.push(producto);
            }
            continue; // Si cumple nivel 2 y 3, no verificamos nivel 4
          }
  
          // Verificar nivel 2 y 4
          if (Array.from(titulosNivel4).some(titulo => titulosProducto.has(titulo))) {
            if (!idsNivel2y4.has(producto.id)) {
              idsNivel2y4.add(producto.id);
              productosNivel2y4.push(producto);
            }
          }
        }
      }
    }
  
    // Imprimir resultados
    console.log('Colecciones Nivel 2:', coleccionNivel2);
    console.log('Colecciones Nivel 3:', coleccionNivel3);
    console.log('Colecciones Nivel 4:', coleccionNivel4);
    console.log('Productos Nivel 2 y 3:', productosNivel2y3);
    console.log('Productos Nivel 2 y 4:', productosNivel2y4);
  
    return {
      colecciones: {
        nivel2: coleccionNivel2,
        nivel3: coleccionNivel3,
        nivel4: coleccionNivel4
      },
      productosNivel2y3,
      productosNivel2y4
    };
  }

  // Llamar a la función
  testPrueba()
  .then(resultado => {
    console.log('Todo salio bien');
      {% comment %} console.log('Resultado:', resultado); {% endcomment %}
  })
  .catch(error => {
      console.error('Error:', error);
  });


  const menuItems = [
    {
      id: '1',
      titulo: 'Elige tamaño',
      solicitud: 'Requerido',
      limite: 1,
      typeSelect: 'radio',
      mainItems: [
        {
          id: '1a',
          titulo: 'Personal para 1 persona',
          precio: 0,
          sideItems: [],
        },
        {
          id: '1b',
          titulo: 'Super personal para 2 a 3 personas',
          precio: 18,
          sideItems: [
            {
              id: '1a1',
              titulo: 'Elige Extra',
              solicitud: 'Opcional',
              limite: 9,
              typeSelect: 'numberCount',
              opciones: [
                {
                  id: '1a1a',
                  titulo: 'Extra Queso',
                  precio: 12,
                },
                {
                  id: '1a1b',
                  titulo: 'Extra Pepeeroni',
                  precio: 5,
                },
                {
                  id: '1a1c',
                  titulo: 'Extra Choclo',
                  precio: 5,
                },
                {
                  id: '1a1d',
                  titulo: 'Extra Tocino',
                  precio: 5,
                },
              ],
            },
          ],
        },
        {
          id: '1c',
          titulo: 'Mediana para 3 a 4 personas',
          precio: 61,
          sideItems: [
            {
              id: '1c1',
              titulo: 'Elige Masa - Borde',
              solicitud: 'Requerido',
              limite: 1,
              typeSelect: 'radio',
              opciones: [
                {
                  id: '1c1a',
                  titulo: 'Pan Pizza',
                  precio: 0,
                },
                {
                  id: '1c1b',
                  titulo: 'Crispy (delgada y crujiente)',
                  precio: 0,
                },
                {
                  id: '1c1c',
                  titulo: 'Pan pizza + borde catupiry',
                  precio: 15,
                },
                {
                  id: '1c1d',
                  titulo: 'Pan pizza + border hot chesse',
                  precio: 12,
                },
              ],
            },
            {
              id: '1c2',
              titulo: 'Elige Extra',
              solicitud: 'Opcional',
              limite: 9,
              typeSelect: 'numberCount',
              opciones: [
                {
                  id: '1c2a',
                  titulo: 'Extra Queso',
                  precio: 12,
                },
                {
                  id: '1c2b',
                  titulo: 'Extra Pepeeroni',
                  precio: 5,
                },
                {
                  id: '1c2c',
                  titulo: 'Extra Choclo',
                  precio: 5,
                },
                {
                  id: '1c2d',
                  titulo: 'Extra Tocino',
                  precio: 5,
                },
              ],
            },
          ],
        },
        {
          id: '1d',
          titulo: 'Familiar para 4 a 5 personas',
          precio: 87,
          sideItems: [
            {
              id: '1d1',
              titulo: 'Elige Masa - Borde',
              solicitud: 'Requerido',
              limite: 1,
              typeSelect: 'radio',
              opciones: [
                {
                  id: '1d1a',
                  titulo: 'Pan Pizza',
                  precio: 0,
                },
                {
                  id: '1d1b',
                  titulo: 'Crispy (delgada y crujiente)',
                  precio: 0,
                },
                {
                  id: '1d1c',
                  titulo: 'Pan pizza + borde catupiry',
                  precio: 15,
                },
                {
                  id: '1d1d',
                  titulo: 'Pan pizza + border hot chesse',
                  precio: 12,
                },
              ],
            },
            {
              id: '1d2',
              titulo: 'Postres',
              solicitud: 'Opcional',
              limite: 9,
              typeSelect: 'checkbox',
              opciones: [
                {
                  id: '1d2a',
                  titulo: '3 Leches',
                  precio: 17,
                },
                {
                  id: '1d2b',
                  titulo: 'Lemon Hut',
                  precio: 22,
                },
                {
                  id: '1d2c',
                  titulo: 'Choco Hut Doblon',
                  precio: 22,
                },
              ],
            },
          ],
        },
      ],
    },
    {
      id: '2',
      titulo: 'GASEOSAS',
      solicitud: 'Opcional',
      limite: 4,
      typeSelect: 'checkbox',
      mainItems: [
        {
          id: '2a',
          titulo: 'Coca Cola x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '2b',
          titulo: 'Coca Cola sin azucar x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '2c',
          titulo: 'Fanta naranja x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '2d',
          titulo: 'Fanta guarana x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '2e',
          titulo: 'Fanta papaya x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '2f',
          titulo: 'Sprite lima limon x 2lt',
          precio: 22,
          sideItems: [],
        },
      ],
    },
    {
      id: '3',
      titulo: 'Postres',
      solicitud: 'Opcional',
      limite: 2,
      typeSelect: 'checkbox',
      mainItems: [
        {
          id: '3a',
          titulo: 'Mousse de Maracuya',
          precio: 17,
          sideItems: [],
        },
        {
          id: '3b',
          titulo: '10 Unidades Cinammon Sticks',
          precio: 22,
          sideItems: [],
        },
        {
          id: '3c',
          titulo: 'Brownie Chocolate Personal',
          precio: 17,
          sideItems: [],
        },
      ],
    },
    {
      id: '5',
      titulo: 'GASEOSAS',
      solicitud: 'Requerido',
      limite: 4,
      typeSelect: 'checkbox',
      mainItems: [
        {
          id: '5a',
          titulo: 'Coca Cola x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '5b',
          titulo: 'Coca Cola sin azucar x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '5c',
          titulo: 'Fanta naranja x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '5d',
          titulo: 'Fanta guarana x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '5e',
          titulo: 'Fanta papaya x 2lt',
          precio: 22,
          sideItems: [],
        },
        {
          id: '5f',
          titulo: 'Sprite lima limon x 2lt',
          precio: 22,
          sideItems: [],
        },
      ],
    },
    {
      id: '4',
      titulo: 'ELIGE 2DO SABOR',
      solicitud: 'Requerido',
      limite: 3,
      typeSelect: 'numberCount',
      mainItems: [
        {
          id: '4a',
          titulo: 'Pepperoni lovers',
          precio: 0,
          sideItems: [],
        },
        {
          id: '4b',
          titulo: 'Chessy lovers',
          precio: 0,
          sideItems: [],
        },
        {
          id: '4c',
          titulo: 'Veggie lovers',
          precio: 0,
          sideItems: [],
        },
        {
          id: '4d',
          titulo: 'Meat lovers',
          precio: 0,
          sideItems: [],
        },
        {
          id: '4e',
          titulo: 'Hawaian lovers',
          precio: 0,
          sideItems: [],
        },
      ],
    },
  ];

  function agregarMenuItems() {
    const contendorPrincipal = document.querySelector('.sector-general-opciones-producto');

    menuItems.forEach((item, index) => {
      const textoSeleccion =
        item.solicitud == 'Opcional'
          ? item.limite == 1
            ? 'Selecciona hasta un artículo'
            : `Selecciona hasta ${item.limite} artículos`
          : item.limite == 1
          ? 'Selecciona un artículo'
          : `Selecciona exactamente ${item.limite} artículos`;
      const colorSolicitud = item.solicitud == 'Opcional' ? 'style="color: #B5B6BD !important;"' : '';

      const menuItemProducto = document.createElement('div');
      menuItemProducto.className = 'menu-item-producto';

      let contenidoHTML = `
        <div class="titulo-detalle-oferta-producto">
          <div id="titulo-detalle__comp1">
            <h2 class="titulo-base1">${item.titulo}</h2>
            <span class="titulo-base2">${textoSeleccion}</span>
          </div>
          <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${item.solicitud.toUpperCase()}</span>
        </div>
        <div class="item-menuItem" id="menuItem-${index}" data-limite="${item.limite}">
      `;

      item.mainItems.forEach((mainItem, mainIndex) => {
        if (item.typeSelect == 'radio') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta3">
              <div class="producto-info3">
                <span class="producto-nombre3">${mainItem.titulo}</span>
                ${parseFloat(mainItem.precio) > 0 ? `<span class="producto-precio3">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="opcion-nombre1">
                <div class="hover-area1" id="hoverArea-${index}-${mainIndex}"></div>
                <input
                  type="radio"
                  id="item-${index}-${mainIndex}"
                  name="opcion-grupo-${index}"
                  class="radio-input"
                  data-group="${index}"
                  data-limite="${item.limite}"
                  onchange="validarLimiteRadio(this)"
                >
              </div>
            </div>
          `;
        }

        if (item.typeSelect === 'numberCount') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta2">
              <div class="producto-info2">
                <span class="producto-nombre2">${mainItem.titulo}</span>
                ${mainItem.precio > 0 ? `<span class="producto-precio2">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="controles-cantidad2">
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="decrementCantidad('${index}-${mainIndex}', '${index}')"
                  data-group="${index}"
                  data-limite="${item.limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
                <p class="cantidad-display2" id="cantidad-${index}-${mainIndex}" data-group="${index}">0</p>
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="incrementCantidad('${index}-${mainIndex}', '${index}')"
                  data-group="${index}"
                  data-limite="${item.limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
              </div>
            </div>
          `;
        }

        if (item.typeSelect === 'checkbox') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta3">
              <div class="producto-info3">
                <span class="producto-nombre3">${mainItem.titulo}</span>
                ${parseFloat(mainItem.precio) > 0 ? `<span class="producto-precio3">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="control-checkbox3">
                <div class="checkbox-container3">
                  <input
                    type="checkbox"
                    id="item-${index}-${mainIndex}"
                    name="properties[${mainItem.titulo}]"
                    class="input-checkbox3"
                    data-group="${index}"
                    data-limite="${item.limite}"
                    onchange="validarLimiteCheckbox(this)"
                  >
                </div>
              </div>
            </div>
          `;
        }
      });

      contenidoHTML += `</div>`;
      menuItemProducto.innerHTML = contenidoHTML;
      contendorPrincipal.appendChild(menuItemProducto);
    });
  }

  function validarLimiteCheckbox(casilla) {
    // Obtiene el ID del grupo desde el atributo data-group del checkbox
    // Ejemplo: si data-group="2", grupoId será "2"
    const grupoId = casilla.dataset.group;

    // Convierte el límite de string a número
    // Ejemplo: si data-limite="4", limitePermitido será 4
    const limitePermitido = parseInt(casilla.dataset.limite);

    // Encuentra el div contenedor del grupo usando el ID
    // Ejemplo: busca <div id="menuItem-2">
    const contenedorGrupo = document.getElementById(`menuItem-${grupoId}`);

    // Obtiene todos los checkboxes dentro de ese grupo
    // Ejemplo: si hay 6 gaseosas, obtiene esos 6 checkboxes
    const casillasGrupo = contenedorGrupo.querySelectorAll('input[type="checkbox"]');

    // Inicializa contador
    let totalSeleccionados = 0;

    // Cuenta cuántos checkboxes están marcados en ese grupo
    // Ejemplo: si marcaste Coca Cola, Fanta y Sprite, totalSeleccionados será 3
    casillasGrupo.forEach((casilla) => {
      if (casilla.checked) totalSeleccionados++;
    });

    // Si excede el límite, desmarca el último checkbox
    // Ejemplo: si el límite es 4 y intentas marcar un quinto, lo impide
    if (totalSeleccionados > limitePermitido) {
      casilla.checked = false;
    }

    verificarRequeridos();
  }

  function validarLimiteRadio(radioBoton) {
    // Obtiene el ID del grupo desde el atributo data-group del radio
    // Ejemplo: si data-group="1", grupoId será "1" (grupo de tamaños de pizza)
    const grupoId = radioBoton.dataset.group;

    // Convierte el límite de string a número
    // Ejemplo: si data-limite="1", limitePermitido será 1 (solo una opción de tamaño)
    const limitePermitido = parseInt(radioBoton.dataset.limite);

    // Encuentra el contenedor del grupo usando el ID
    // Ejemplo: busca <div id="menuItem-1"> (contenedor de tamaños)
    const contenedorGrupo = document.getElementById(`menuItem-${grupoId}`);

    // Obtiene todos los radio buttons MARCADOS dentro de ese grupo
    // Ejemplo: obtiene todos los radio buttons de tamaño que estén checked
    const radiosBotones = contenedorGrupo.querySelectorAll('input[type="radio"]:checked');

    // Si hay más seleccionados que el límite permitido, desmarca el último
    // Ejemplo: si intentas seleccionar un segundo tamaño cuando el límite es 1
    if (radiosBotones.length > limitePermitido) {
      radioBoton.checked = false;
    }
  }

  function obtenerSumaGrupo(grupo) {
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const displays = contenedorGrupo.querySelectorAll('.cantidad-display2');
    let suma = 0;
    displays.forEach((display) => {
      suma += parseInt(display.textContent || '0');
    });
    return suma;
  }

  function incrementCantidad(id, grupo) {
    const display = document.getElementById(`cantidad-${id}`);
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const limite = parseInt(contenedorGrupo.dataset.limite);
    const sumaActual = obtenerSumaGrupo(grupo);
  
    if (sumaActual < limite) {
      const valorActual = parseInt(display.textContent || '0');
      display.textContent = valorActual + 1;
      // Actualizar estado de todos los botones después de incrementar
      actualizarBotonesNumberCount(grupo);
    }

    verificarRequeridos();
  }
  
  function decrementCantidad(id, grupo) {
    const display = document.getElementById(`cantidad-${id}`);
    const valorActual = parseInt(display.textContent || '0');
    
    if (valorActual > 0) {
      display.textContent = valorActual - 1;
      // Actualizar estado de todos los botones después de decrementar
      actualizarBotonesNumberCount(grupo);
    }
    verificarRequeridos();
  }

  function actualizarBotonesNumberCount(grupo) {
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const limite = parseInt(contenedorGrupo.dataset.limite);
    const sumaTotal = obtenerSumaGrupo(grupo);
    
    // Obtener todos los pares de botones y sus displays
    const elementosGrupo = contenedorGrupo.querySelectorAll('.opcion-principal-detalle-oferta2');
    
    elementosGrupo.forEach((elemento, index) => {
      const botonIncremento = elemento.querySelector('button:last-child');
      const botonDecremento = elemento.querySelector('button:first-child');
      const display = elemento.querySelector('.cantidad-display2');
      const cantidad = parseInt(display.textContent || '0');
      
      // Manejar botón de incremento
      if (sumaTotal >= limite) {
        // Si llegamos al límite, deshabilitamos incremento
        botonIncremento.style.fill = 'currentColor';
        botonIncremento.disabled = true;
      } else {
        // Si no llegamos al límite, habilitamos incremento
        botonIncremento.style.fill = '';
        botonIncremento.disabled = false;
      }
      
      // Manejar botón de decremento
      if (cantidad === 0) {
        // Si el valor es 0, deshabilitamos decremento
        botonDecremento.style.fill = 'currentColor';
        botonDecremento.disabled = true;
      } else {
        // Si el valor es mayor a 0, habilitamos decremento
        botonDecremento.style.fill = '';
        botonDecremento.disabled = false;
      }
    });
  }

  {% comment %} MARCAR OPCIONES PREDEFINIDAS CUANDO ES REQUERIDO {% endcomment %}
  function marcarOpcionesRequeridas() {
    menuItems.forEach((item, index) => {
      if (item.solicitud === 'Requerido') {
        const contenedorGrupo = document.getElementById(`menuItem-${index}`);
        
        // Caso 1: Radio buttons
        if (item.typeSelect === 'radio') {
          const primerRadio = contenedorGrupo.querySelector('input[type="radio"]');
          if (primerRadio) {
            primerRadio.checked = true;
          }
        }
        
        // Caso 2: Checkbox
        else if (item.typeSelect === 'checkbox') {
          const checkboxes = contenedorGrupo.querySelectorAll('input[type="checkbox"]');
          const limite = parseInt(item.limite);
          
          // Marcar los primeros checkboxes según el límite
          checkboxes.forEach((checkbox, i) => {
            if (i < limite) {
              checkbox.checked = true;
            }
          });
        }
        
        // Caso 3: NumberCount
        else if (item.typeSelect === 'numberCount') {
          const cantidadElementos = item.mainItems.length;
          const limite = parseInt(item.limite);
          const valorPorElemento = Math.floor(limite / cantidadElementos);
          const residuo = limite % cantidadElementos;
          
          item.mainItems.forEach((_, mainIndex) => {
            const display = document.getElementById(`cantidad-${index}-${mainIndex}`);
            if (display) {
              // Distribuir el límite entre todos los elementos
              let valor = valorPorElemento;
              if (mainIndex < residuo) {
                valor += 1; // Distribuir el residuo entre los primeros elementos
              }
              display.textContent = valor;
            }
          });
          
          // Actualizar estado de los botones después de establecer valores
          actualizarBotonesNumberCount(index);
        }
      }
    });
  }

  function verificarRequeridos() {
    menuItems.forEach((item, index) => {
      if (item.solicitud === 'Requerido') {
        const contenedorGrupo = document.getElementById(`menuItem-${index}`);
        const tituloBase1 = contenedorGrupo.parentElement.querySelector('.titulo-base1');
        const tituloBase2 = contenedorGrupo.parentElement.querySelector('.titulo-base2');
        const tituloSeleccion = contenedorGrupo.parentElement.querySelector('.titulo-detalle-seleccion');
        
        let faltaSeleccion = false;
        
        if (item.typeSelect === 'checkbox') {
          const checkboxesSeleccionados = contenedorGrupo.querySelectorAll('input[type="checkbox"]:checked').length;
          faltaSeleccion = checkboxesSeleccionados < item.limite;
          
          // Marcar elementos en rojo si falta selección
          const checkboxes = contenedorGrupo.querySelectorAll('.producto-nombre3');
          checkboxes.forEach(elem => {
            if (faltaSeleccion) {
              elem.style.setProperty('color', '#FF6565', 'important');
            } else {
              elem.style.removeProperty('color');
            }
          });
        }
        else if (item.typeSelect === 'numberCount') {
          const sumaTotal = obtenerSumaGrupo(index);
          faltaSeleccion = sumaTotal < item.limite;
          
          // Marcar elementos en rojo si falta selección
          const elementos = contenedorGrupo.querySelectorAll('.producto-nombre2');
          elementos.forEach(elem => {
            if (faltaSeleccion) {
              elem.style.setProperty('color', '#FF6565', 'important');
            } else {
              elem.style.removeProperty('color');
            }
          });
        }
        
        // Actualizar colores de los títulos
        if (faltaSeleccion) {
          tituloBase1.style.setProperty('color', '#FF6565', 'important');
          tituloBase2.style.setProperty('color', '#FF6565', 'important');
          tituloSeleccion.style.setProperty('color', '#FF6565', 'important');
        } else {
          tituloBase1.style.removeProperty('color');
          tituloBase2.style.removeProperty('color');
          tituloSeleccion.style.removeProperty('color');
        }
      }
    });
  }

  // Agregar ambos eventos para asegurar la ejecución
  document.addEventListener('DOMContentLoaded', () => {
    agregarMenuItems();
    marcarOpcionesRequeridas();
    verificarRequeridos();
  });

  if (document.readyState === 'complete') {
    agregarMenuItems();
    marcarOpcionesRequeridas();
    verificarRequeridos();
  }
</script>
<style>
  .opcion-principal-detalle-oferta1 input[type='radio'] {
    opacity: 1 !important;
    visibility: visible !important;
  }

  .opcion-principal-detalle-oferta1 input[type='radio']:checked {
    border-width: 5px !important;
  }

  .opcion-principal-detalle-oferta1 input[type='radio']:hover {
    background-color: rgba(0, 0, 0, 0.2);
  }

  .opcion-principal-detalle-oferta1 input[type='checkbox'] {
    opacity: 1 !important;
    visibility: visible !important;
  }

  .opcion-principal-detalle-oferta1 input[type='checkbox']:checked {
    border-width: 5px !important;
  }

  .checkbox-container:hover {
    background-color: rgba(0, 0, 0, 0.2) !important;
  }

  {% comment %} INICIO DE ESTILOS div class="detalle-producto-right" {% endcomment %}
  .detalle-producto-right {
    flex: 1 1 60% !important;
    height: 100% !important;
    overflow: hidden !important;
    padding: 15px 0px 0px 0px !important;
    display: flex !important;
    flex-direction: column !important;
  }

  .detalle-producto-right .productView-product {
    width: 100% !important;
    min-width: 0 !important;
    flex: 1 !important;
  }

  .productView-product .productView-title {
    {% comment %} padding-bottom: 5px !important; {% endcomment %}
    font-weight: bold !important;
    font-size: 22px !important;
    white-space: normal !important;
    {% comment %} padding-bottom: 13px !important; {% endcomment %}
  }

  .productView-product .sector-general-opciones-producto {
    display: flex !important;
    flex-direction: column !important;
    width: 100% !important;
    min-width: 0 !important;
    gap: 11px !important;
  }

  .detalle-producto-right .opciontes-seleccion-cliente {
    flex: 1 1 89.7% !important;
    width: 100% !important;
    {% comment %} background-color: #4caf50 !important; {% endcomment %}
    overflow-y: auto !important;
    overflow-x: hidden !important;
    display: flex !important;
    flex-direction: column !important;
    padding-right : 4px;
  }

  .sector-general-opciones-producto .menu-item-producto{
    width: 100% !important;
    display: flex !important;
    flex-direction: column !important;
    min-width: 0 !important;
  }

  .titulo-detalle-oferta-producto{
    display: flex !important;
    flex-direction: row !important;
    align-items: center !important;
    justify-content: space-between !important;
    width: 100% !important;
  }

  #titulo-detalle__comp1 {
    display: flex !important;
    flex-direction: column !important;
  }

  .titulo-base1 {
    padding-bottom: 2px !important;
    font-weight: bold !important;
    font-size: 18px !important;
  }

  .titulo-base2 {
    color: #B5B6BD !important;
    font-size: 14px !important;
    margin-bottom: 0px !important;
  }

  .titulo-detalle-seleccion.text {
    font-size: 16px !important;
    color: #69d975 !important;
    margin-bottom: 0px !important;
  }


  .item-menuItem {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
  }

   .opcion-principal-detalle-oferta1 {
    width: 100%;
    padding: 3px 5.5px 8px 3px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid rgb(212, 208, 208);
  }

  .opcion-texto1 {
    display: flex;
    gap: 4px;
  }

  .producto-info1 {
    display: flex;
    gap: 4px;
  }

  .producto-nombre1 {
    font-weight: 400;
    color: #1d1d1d;
  }

  .producto-precio1 {
    color: #999999;
    font-weight: 500;
  }

  .opcion-nombre1 {
    position: relative;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hover-area1 {
    position: absolute;
    width: 44px;
    height: 44px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    transition: background-color 0.2s ease;
    pointer-events: none;
  }

  .radio-input {
    appearance: auto !important;
    -webkit-appearance: radio !important;
    opacity: 1 !important;
    display: block !important;
    width: 24px !important;
    height: 24px !important;
    margin: 0 !important;
    cursor: pointer !important;
    position: relative !important;
    z-index: 1 !important;
    visibility: visible !important;
    accent-color: #232323 !important;
    border: 3px solid #232323 !important;
    border-radius: 50% !important;
  }

  .radio-input:hover + .hover-area1 {
    background-color: rgba(0,0,0,0.08);
  }

  .sub-item-producto{
    width: 100% !important;
    min-width: 0 !important;
    padding: 10px 0px 10px 15px !important;
    display: flex !important;
    flex-direction: column !important;
    {% comment %} gap: 10px !important; {% endcomment %}
    background-color: #f3f3f3 !important;
  }

  .opcion-principal-detalle-oferta2 {
    width: 100%;
    height: 40px !important;
    {% comment %} padding: 8px 0px 8px 3px; {% endcomment %}
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid rgb(212, 208, 208);
  }

  .producto-info2 {
    display: flex;
    gap: 4px;
  }

  .producto-nombre2 {
    font-weight: 400;
    color: #1d1d1d;
  }

  .producto-precio2 {
    color: #999999;
    font-weight: 500;
  }

  .controles-cantidad2 {
    display: flex;
    align-items: center;
    {% comment %} gap: 3px; {% endcomment %}
  }

  .btn-cantidad2 {
    width: 32px !important;
    height: 32px !important;
    border: none !important;
    background: transparent !important;
    cursor: pointer !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: 0 !important;
  }

  .cantidad-display2 {
    font-weight: 400;
    color: #1d1d1d;
    width: 26px;
    height: 32px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0;
  }

  .MuiSvgIcon-root2 {
    {% comment %} width: 24px;
    height: 24px; {% endcomment %}
    width: 80%;
    height: 80%;
  }

  .opcion-principal-detalle-oferta3 {
    width: 100%;
    padding: 8px 0px 8px 3.5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid rgb(212, 208, 208);
  }

  .producto-info3 {
    display: flex;
    gap: 4px;
  }

  .producto-nombre3 {
    font-weight: 400;
    color: #1d1d1d;
  }

  .producto-precio3 {
    color: #999999;
    font-weight: 500;
  }

  .control-checkbox3 {
    display: flex;
    align-items: center;
  }

  .checkbox-container3 {
    padding: 0px 5px 0px 0px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    cursor: pointer;
  }

  .input-checkbox3 {
    -webkit-appearance: checkbox !important;
    -moz-appearance: checkbox !important;
    width: 20px !important;
    height: 20px !important;
    margin: 0 !important;
    padding: 0 !important;
    cursor: pointer !important;
    display: block !important;
    position: static !important;
    accent-color: black !important;
  }
  {% comment %} FIN DE ESTILOS div class="detalle-producto-right" {% endcomment %}
</style>
