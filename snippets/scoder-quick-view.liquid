{%- liquid
  assign primera_coleccion = collections | first

  assign layout = settings.quick_view_layout
  assign max_thumbnail_to_show = settings.thumbnail_to_show
  assign current_variant = product.selected_or_first_available_variant
  assign variantCount = product.variants | size
  assign featured_media_aspect_ratio = product.featured_media.aspect_ratio
  if product.featured_media.aspect_ratio == null
    assign featured_media_aspect_ratio = 1
  endif
  assign media_size = settings.quick_view_product_image_ratio
  assign portrait_aspect_ratio = settings.quick_view_portrait_aspect_ratio | append: '%'
  assign quick_view_zoomed_image = settings.quick_view_zoomed_image
  assign show_quick_view_badge = settings.show_quick_view_badge
  assign fontsize_text = settings.fontsize_text
  assign color_title = settings.color_title
  assign show_quick_view_review = settings.show_quick_view_review
  assign word_number_short_desc = settings.word_number_short_desc
  assign fontsize_short_desc = settings.fontsize_short_desc
  assign color_short_desc = settings.color_short_desc
  assign show_quick_view_sold_in = settings.show_quick_view_sold_in
  if show_quick_view_sold_in
    assign quick_view_sold_in_number = settings.quick_view_sold_in_number
    assign quick_view_sold_in_hours = settings.quick_view_sold_in_hours
  endif
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign fontsize_price = settings.fontsize_price
  assign show_countdown = settings.show_countdown
  if show_countdown
    assign countdown_type = settings.countdown_type
    assign countdown_time = settings.countdown_time
    assign countdown_collection = settings.countdown_collection | downcase | handle
    assign countdown_style = settings.countdown_style
  endif
  assign show_quick_view_vendor = settings.show_quick_view_vendor
  assign show_quick_view_availability = settings.show_quick_view_availability
  assign show_quick_view_sku = settings.show_quick_view_sku
  assign show_quick_view_product_type = settings.show_quick_view_product_type
  assign quick_view_picker_type = settings.quick_view_picker_type
  assign stock_level_display = settings.stock_level_display
  assign show_hot_stock = settings.show_hot_stock
  if show_hot_stock
    assign productMaxStock = settings.hot_stock_limit | plus: 0
  endif
  assign show_quick_view_qty = settings.show_quick_view_qty
  assign show_quick_view_subtotal = settings.show_quick_view_subtotal
  assign show_subtotal = false
  assign subtotal = 0
  if show_quick_view_subtotal and show_quick_view_qty
    assign show_subtotal = true
    assign subtotal = current_variant.price | money
  endif
  assign show_dynamic_checkout = settings.show_dynamic_checkout
  assign show_quick_view_customer_viewing = settings.show_quick_view_customer_viewing
  if show_quick_view_customer_viewing
    assign quick_view_customer_viewing_number = settings.quick_view_customer_viewing_number
    assign quick_view_customer_viewing_time = settings.quick_view_customer_viewing_time
  endif
  assign show_quick_view_trust_image = settings.show_quick_view_trust_image
  assign show_quick_view_share = settings.show_quick_view_share
  if show_quick_view_share
    assign share_product_script = settings.share_product_script
  endif

  assign show_customization_option = settings.show_customization_option
  if show_customization_option
    assign has_customization_option = false
    assign customization_option_type = settings.customization_option_type
    assign customization_option_hidden = settings.customization_option_hidden
    if customization_option_type == 'all'
      assign has_customization_option = true
    elsif customization_option_type == 'tag'
      assign customization_option_tags = settings.customization_option_tags | downcase | strip | split: ','
      for tag in customization_option_tags
        assign tagtitle = tag | strip
        assign productTag = product.tags | downcase
        if productTag contains tagtitle
          assign has_customization_option = true
        endif
      endfor
    elsif customization_option_type == 'collection'
      assign customization_option_collection = settings.customization_option_collection | downcase | handle
      if customization_option_collection != blank
        for collection in product.collections
          assign collection_title = collection.title | downcase | handle
          if collection_title == customization_option_collection
            assign has_customization_option = true
          endif
        endfor
      endif
    endif
    assign customization_option_1 = settings.customization_option_1
    assign customization_option_2 = settings.customization_option_2
  endif
  assign show_quick_view_variant_image_group = settings.show_quick_view_variant_image_group
-%}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{
      padding-bottom: {{ portrait_aspect_ratio }};
  }
</style>
{{ 'component-product-form.css' | asset_url | stylesheet_tag }}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{padding-bottom: {{ portrait_aspect_ratio }}}
  {% if settings.button_hover_style == '2' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);;
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-action .button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-action .button:hover {
        color: var(--atc-color-hover);
        background: var(--atc-bg-color-hover);
        border-color: var(--atc-border-color-hover);
    }
  {% endif %}
  {% if settings.button_hover_style == '2' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        background: var(--bin-bg-color-hover);
        border-color: var(--bin-border-color-hover);
        box-shadow: unset;
    }
  {% endif %}
</style>
{{ 'scoder-quick-view.css' | asset_url | stylesheet_tag }}

{%- if variantCount > 0 and product.has_only_default_variant != true -%}
  <script>
    window.quick_view_inven_array_{{ product.id }} = {
        {% for variant in product.variants %}
            '{{ variant.id }}': '{{ variant.inventory_quantity }}',
        {% endfor %}
    };
  </script>
{%- endif -%}
<script>
    window.quick_view_subtotal = {
        show: {{ show_subtotal }},
        text: `{{ 'products.product.sub_total' | t : value : '[value]' }}`
    };
    window.quick_view_selling_array_{{ product.id }} = {
      {% for variant in product.variants %}
          '{{ variant.id }}': '{{ variant.inventory_policy }}',
      {% endfor %}
   };
</script>

<div
  class="productView quickView scoder-quickView layout-{{ layout }}{% if product.media.size == 0 %} productView-no-media{% endif %}"
  data-product-quickview-handle="{{ product.handle }}"
>
  <div class="productView-top">
    <div class="detalle-producto-left">
      <div class="image-producto">
        {%- for media in product.media limit: 1 -%}
          {%- case media.media_type -%}
            {%- when 'image' -%}
              {% comment %} style="width: 100% !important; height: 100% !important; object-fit: contain !important; display: block !important; margin: auto !important;" {% endcomment %}
              <img
                style="width: 100% !important; height: 100% !important; object-fit: contain !important; display: block !important; margin: auto !important;"
                id="image-producto-original product-featured-image-{{ media.id }}"
                {% render 'lazyload', preview_img: media.preview_image, class: true %}
                title="{{ media.preview_image.alt | escape }}"
                data-main-image
              >
          {%- endcase -%}
        {%- endfor -%}
      </div>
      <div class="informacion-producto-opciones">
        {% comment %} READ : DETALLE DE PRODUCTO INICIO {% endcomment %}
        <div class="detalle-producto">
          <h2
            class="productView-title"
            style="--color-title: {{ color_title }};--fontsize-text: {{ fontsize_text | append: 'px' }}"
          >
            <a href="{{ product.url }}">{{ product.title | escape }}</a>
          </h2>
          {%- if show_quick_view_review or show_quick_view_sold_in -%}
            <div
              class="productView-meta clearfix"
              style="--color_short_desc: {{ color_short_desc }}; --fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
            >
              {%- if show_quick_view_review -%}
                <div class="productView-rating scoder-productReview">
                  <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_sold_in -%}
                <div
                  class="productView-soldProduct"
                  data-sold-out-product
                  data-item="{{ quick_view_sold_in_number }}"
                  data-hours="{{ quick_view_sold_in_hours }}"
                  style="display: none;"
                >
                  {% render 'icon-fire-2' %}
                  <span class="text"
                    ><span data-sold-out-number>2</span> {{ 'products.product.sold_in_last.text_1' | t }}
                    <span data-sold-out-hours>8</span> {{ 'products.product.sold_in_last.text_2' | t -}}
                  </span>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}

          {%- if show_quick_view_short_description -%}
            {%- liquid
              assign desc = product.description
            -%}
            {%- if product.metafields.c_f.short_description -%}
              {%- liquid
                assign desc = product.metafields.c_f.short_description
              -%}
            {%- endif -%}
            {%- if desc != blank -%}
              <div
                class="productView-desc scoder-text-format"
                style="--color_short_desc: {{ color_short_desc }};--fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
              >
                {{ desc }}
              </div>
            {%- endif -%}
          {%- endif -%}
          {%- if show_quick_view_vendor
            or show_quick_view_availability
            or show_quick_view_sku
            or show_quick_view_product_type
          -%}
            <div class="productView-info">
              {%- if show_quick_view_sku -%}
                <div
                  class="productView-info-item"
                  data-sku
                  {% unless current_variant.sku != blank %}
                    style="display: none;"
                  {% endunless %}
                >
                  <span class="productView-info-name">{{ 'products.product.text.sku' | t }}</span>
                  <span class="productView-info-value">{{ current_variant.sku }}</span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_vendor -%}
                <div class="productView-info-item">
                  <span class="productView-info-name">{{ 'products.product.text.vendor' | t }}</span>
                  <span class="productView-info-value">{{ product.vendor | link_to_vendor }}</span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_availability -%}
                <div class="productView-info-item" data-inventory data-stock-level="{{ stock_level_display }}">
                  <span class="productView-info-name">{{ 'products.product.text.availability' | t }}</span>
                  <span class="productView-info-value">
                    {%- if current_variant.inventory_management -%}
                      {%- assign first_inventory = current_variant.inventory_quantity -%}
                      {%- if first_inventory > 0 -%}
                        {% if stock_level_display == 'show' %}{{ first_inventory }} {% endif %}
                        {{ 'products.product.in_stock' | t }}
                      {%- else -%}
                        {{ 'products.product.out_of_stock' | t }}
                      {%- endif -%}
                    {%- else -%}
                      {{ 'products.product.many_in_stock' | t }}
                    {%- endif -%}
                  </span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_product_type -%}
                <div class="productView-info-item">
                  <span class="productView-info-name">{{ 'products.product.text.type' | t }}</span>
                  <span class="productView-info-value">{{ product.type | escape }}</span>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}
          <div
            class="productView-price no-js-hidden clearfix"
            id="product-quick-view-price-{{ product.id }}"
            style="--fontsize-text: {{ fontsize_price | append: 'px' }};"
          >
            {%- render 'price', product: product, use_variant: true, price_class: 'price--medium' -%}
          </div>
          {% comment %}
            <h2
              class="productView-title"
              style="--color-title: {{ color_title }};--fontsize-text: {{ fontsize_text | append: 'px' }}"
            >
              <a href="{{ product.url }}">{{ product.title | escape }}</a>
            </h2>
            {%- if show_quick_view_short_description -%}
              {%- liquid
                assign desc = product.description
              -%}
              {%- if desc != blank -%}
                <div
                  class="productView-desc scoder-text-format"
                  style="--color_short_desc: {{ color_short_desc }};--fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
                >
                  {{ desc | truncatewords: word_number_short_desc }}
                </div>
              {%- endif -%}
            {%- endif -%}
            <div
              class="productView-price no-js-hidden clearfix"
              id="product-quick-view-price-{{ product.id }}"
              style="--fontsize-text: {{ fontsize_price | append: 'px' }};"
            >
              {%- render 'price', product: product, use_variant: true, price_class: 'price--medium' -%}
            </div>
          {% endcomment %}
          {%- if show_quick_view_qty -%}
            <div
              class="quantity_selector productView-groupTop"
              style="
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: wrap !important;
                align-items: end !important;
              "
            >
              <quantity-quick-view-input class="productView-quantity quantity__group quantity__group--1 quantity__style--1 clearfix ">
                <label class="form-label quantity__label" for="quantity-{{ product.id }}">
                  {{- 'products.product.quantity.label__2' | t -}}
                </label>
                <div class="quantity__container">
                  <button type="button" name="minus" class="minus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                    </span>
                  </button>
                  <input
                    class="form-input quantity__input quantity"
                    type="number"
                    name="quantity"
                    min="1"
                    value="1"
                    inputmode="numeric"
                    pattern="[0-9]*"
                    id="quantity-{{ product.id }}"
                    data-product="{{ product.id }}"
                    data-price="{{ current_variant.price }}"
                    data-inventory-quantity="{{ current_variant.inventory_quantity }}"
                  >
                  <button type="button" name="plus" class="plus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                    </span>
                  </button>
                </div>
              </quantity-quick-view-input>
              {%- if settings.show_wishlist -%}
                <div class="productView-wishlist clearfix">
                  <a
                    data-wishlist
                    href="#"
                    data-wishlist-handle="{{ product.handle }}"
                    data-product-id="{{ product.id }}"
                    ><span class="visually-hidden">{{ 'wishlist.general.add' | t }}</span> {% render 'icon-heart' -%}
                  </a>
                </div>
              {%- endif -%}
              {%- if show_quick_view_share -%}
                {% render 'scoder-share', product: product, share_layout: '2' %}
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
        {% comment %} READ : DETALLE DE PRODUCTO FIN {% endcomment %}
      </div>
    </div>
    <div class="detalle-producto-right">
      <div class="opciontes-seleccion-cliente">
        <h2 class="productView-title">PERSONALIZAR EL ÍTEM</h2>
        <div class="productView-product">
          <div class="sector-general-opciones-producto"></div>
        </div>
      </div>
      <div
        style="height: 10.3% !important;width: 100% !important;"
        class="acciones-cliente"
      >
        <div class="productView-options">
          {%- assign product_form_installment_id = 'product-quick-view-form-installment-' | append: product.id -%}
          {%- form 'product', product, id: product_form_installment_id, class: 'installment caption-large' -%}
            <input type="hidden" name="id" value="{{ current_variant.id }}">
            {{ form | payment_terms }}
          {%- endform -%}
          <div
            class="productView-variants scoder-productOptions"
            id="product-quick-view-option-{{ product.id }}"
            data-type="{{ quick_view_picker_type }}"
          >
            {%- if variantCount > 0 and product.has_only_default_variant != true -%}
              {%- if quick_view_picker_type == 'button' -%}
                {%- assign product_swatch_option = settings.swatch | downcase -%}
                <variant-quick-view-radios
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    {%- liquid
                      assign is_swatch = false
                      assign option_name = option.name | downcase
                      if product_swatch_option contains option_name
                        assign is_swatch = true
                      endif
                      assign swatch_type = settings.swatch_type
                      assign option_index = forloop.index0
                    -%}
                    <fieldset
                      class="js product-form__input{% if is_swatch %} product-form__swatch{% endif %} clearfix"
                      data-product-attribute="set-rectangle"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <legend class="form__label">
                        {{ option.name | append: ':' }}
                        <span data-header-option>
                          {{ option.selected_value }}
                        </span>
                      </legend>
                      {%- assign values = '' -%}
                      {%- liquid
                        assign variants_available_arr = product.variants | map: 'available'
                        assign variants_option1_arr = product.variants | map: 'option1'
                        assign variants_option2_arr = product.variants | map: 'option2'
                        assign variants_option3_arr = product.variants | map: 'option3'
                      -%}
                      {%- for variant in product.variants -%}
                        {%- assign value = variant.options[option_index] -%}
                        {%- unless values contains value -%}
                          {%- liquid
                            assign values = values | join: ';'
                            assign values = values | append: ';' | append: value
                            assign values = values | split: ';'
                            assign option_stock = 'soldout'

                            for option1_name in variants_option1_arr
                              case option.position
                                when 1
                                  if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 2
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 3
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                              endcase
                            endfor
                          -%}
                          <input
                            class="product-form__radio"
                            type="radio"
                            id="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            name="{{ option.name }}"
                            value="{{ value | escape }}"
                            {% if option.selected_value == value %}
                              checked
                            {% endif -%}
                            {% if settings.show_quick_view_variant_image_group %}
                              data-filter=".filter-{{ value | handle }}"
                            {% endif %}
                          >
                          {%- if is_swatch -%}
                            {%- liquid
                              assign enable_variant_image = false
                              case swatch_type
                                when 'variant_image'
                                  assign background_image = variant.image.src | product_img_url: '40x'
                                  if variant.image
                                    assign enable_variant_image = true
                                  endif
                                when 'color'
                                  assign background_image = value | handle | append: '.png' | file_url
                                  assign enable_variant_image = true
                                when 'metafields'
                                  assign variant_color = variant.metafields.custom.variant_color
                                  assign color_codes = false

                                  if variant_color
                                    assign enable_variant_image = true

                                    if variant_color contains '#' or variant_color contains 'rgb' or variant_color contains 'hsl'
                                      assign color_codes = true
                                      assign background_color = variant_color
                                    else
                                      assign background_image = variant_color | append: '.png' | file_url
                                    endif
                                  elsif variant.image
                                    assign enable_variant_image = true
                                    assign background_image = variant.image.src | product_img_url: '40x'
                                  endif
                              endcase
                            -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            >
                              <span
                                class="pattern"
                                style="background-color: {{ value | split: ' ' | last | handle }};{% if enable_variant_image %}{% if swatch_type == 'metafields' %}{% if color_codes %} background: {{ background_color }}{% else %} background: url({{ background_image }}); background-size: cover;{% endif %}{% else %} background-image: url({{ background_image }});{% endif %}{% endif %}"
                              ></span>
                            </label>
                          {%- else -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                              ><span class="text">{{ value }}</span></label
                            >
                          {%- endif -%}
                        {%- endunless -%}
                      {%- endfor -%}
                    </fieldset>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-radios>
              {%- else -%}
                <variant-quick-view-selects
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    <div
                      class="product-form__input product-form__input--dropdown"
                      data-product-attribute="set-select"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <label class="form__label" for="option-quick-view-{{ forloop.index0 }}">
                        {{- option.name | append: ':' }}
                        <span data-header-option>{{ option.selected_value }}</span></label
                      >
                      <div class="form__select select">
                        <select
                          id="option-quick-view-{{ forloop.index0 }}"
                          class="select__select"
                          name="options[{{ option.name | escape }}]"
                        >
                          {%- for value in option.values -%}
                            <option
                              value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                                selected="selected"
                              {% endif %}
                            >
                              {{ value }}
                            </option>
                          {%- endfor -%}
                        </select>
                      </div>
                    </div>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-selects>
              {%- endif -%}
              {%- if show_hot_stock -%}
                <div class="productView-hotStock" data-hot-stock="{{ productMaxStock }}">
                  {%- if current_variant.inventory_management -%}
                    {%- if current_variant.inventory_quantity > 0
                      and current_variant.inventory_quantity <= productMaxStock
                    -%}
                      {{ 'products.product.hot_stock' | t: inventory: current_variant.inventory_quantity }}
                    {%- endif -%}
                  {%- endif -%}
                </div>
              {%- endif -%}
            {%- endif -%}
          </div>
          <noscript>
            <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
              <label class="form__label" for="Variants-{{ section.id }}">
                {{- 'products.product.product_variants' | t -}}
              </label>
              <div class="select">
                <select name="id" id="Variants-{{ section.id }}" class="select__select" form="product-form">
                  {%- for variant in product.variants -%}
                    <option
                      {% if variant == product.selected_or_first_available_variant %}
                        selected="selected"
                      {% endif %}
                      {% if variant.available == false %}
                        disabled
                      {% endif %}
                      value="{{ variant.id }}"
                    >
                      {{ variant.title }}
                      {%- if variant.available == false %} - {{ 'products.product.sold_out' | t }}{% endif %}
                      - {{ variant.price | money | strip_html }}
                    </option>
                  {%- endfor -%}
                </select>
              </div>
            </div>
          </noscript>
          {%- assign product_form_id = 'product-quick-view-form-' | append: product.id -%}
          {%- form 'product',
            product,
            id: product_form_id,
            class: 'form productView-action',
            novalidate: 'novalidate',
            data-type: 'add-to-cart-form'
          -%}
            {% comment %} <div class="productView-message" style="display: none;"></div> {% endcomment %}
            <div
              class="productView-group"
              style="
                display: flex !important;
                flex-direction: row !important;
                gap : 1% !important;
              "
            >
              <div class="productView-groupTop">
                <div
                  class="productView-action{% unless settings.show_wishlist %} productView-action-2{% endunless %}"
                  style="--atc-color: #ffffff;--atc-bg-color: #232323;--atc-border-color: #232323;--atc-color-hover: #232323;--atc-bg-color-hover: #ffffff;--atc-border-color-hover: #232323"
                >
                  <input type="hidden" name="id" value="{{ current_variant.id }}">
                  <div class="product-form__buttons">
                    {%- if current_variant.available -%}
                      {%- if current_variant.inventory_management -%}
                        {%- assign first_inventory = current_variant.inventory_quantity -%}
                        {%- liquid
                          if current_variant.available and first_inventory == 0
                            assign allowOutStockSale = true
                          else
                            assign allowOutStockSale = false
                          endif
                        -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          style="display: flex !important; flex-direction : column !important ; justify-content: center !important; align-items: center !important;"
                          data-available="{{ allowOutStockSale }}"
                          class="product-form__submit button button--primary{% if first_inventory == 0 %} button-text-change{% else %}{% if show_subtotal_text %} button-text-change{% endif %}{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if first_inventory > 0 -%}
                            {%- if show_subtotal_text and subtotal_style == '2' -%}
                              {%- assign subtotal = subtotal | strip_html -%}
                              {{ 'products.product.sub_total' | t: value: subtotal }}
                            {%- else -%}
                              {{ 'products.product.add_to_cart' | t }}
                            {%- endif -%}
                          {%- else -%}
                            {{ 'products.product.pre_order' | t }}
                          {%- endif -%}
                          <p class="etiqueta-agregar-carrito"></p>
                        </button>
                      {%- else -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          class="product-form__submit button button--secondary{% if show_subtotal_text %} button-text-change{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if show_subtotal_text and subtotal_style == '2' -%}
                            {%- assign subtotal = subtotal | strip_html -%}
                            {{ 'products.product.sub_total' | t: value: subtotal }}
                          {%- else -%}
                            {{ 'products.product.add_to_cart' | t }}
                          {%- endif -%}
                        </button>
                      {%- endif -%}
                    {%- else -%}
                      <button
                        type="submit"
                        name="add"
                        data-btn-addToCart
                        class="product-form__submit button"
                        id="product-add-to-cart"
                        disabled
                      >
                        {{ 'products.product.sold_out' | t }}
                      </button>
                    {%- endif -%}
                  </div>
                </div>
              </div>
              {%- if show_dynamic_checkout -%}
                <div class="productView-groupBottom">
                  <div class="productView-groupItem">
                    <div
                      class="productView-payment"
                      id="product-checkout-{{ product.id }}"
                      style="--bin-color: #232323;--bin-bg-color: #ffffff;--bin-border-color: #acacac;--bin-color-hover: #ffffff;--bin-bg-color-hover: #232323;--bin-border-color-hover: #232323"
                    >
                      {{ form | payment_button }}
                    </div>
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endform -%}
          {%- if show_quick_view_customer_viewing or show_quick_view_trust_image -%}
            <div class="productView-more">
              {%- if show_quick_view_customer_viewing -%}
                <div class="productView-moreItem">
                  <div
                    class="productView-ViewingProduct"
                    data-customer-view="{{ quick_view_customer_viewing_number }}"
                    data-customer-view-time="{{ quick_view_customer_viewing_time }}"
                  >
                    {% render 'icon-eyes-2' %}
                    <span class="text">{{ 'customer_viewing.general.text' | t: number: '10' }}</span>
                  </div>
                </div>
              {%- endif -%}
              {%- if show_quick_view_trust_image -%}
                <div class="productView-moreItem">
                  <div class="productView-securityImage">
                    {%- render 'scoder-trust-image', type: 'product' -%}
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
      </div>
    </div>
  </div>
</div>
{%- if show_size_chart and has_size_chart -%}
  {% render 'scoder-size-chart-popup',
    product: product,
    size_chart_type: size_chart_type,
    size_chart_image: size_chart_image
  %}
{%- endif -%}
{%- if show_compare_color and isColor -%}
  {% render 'scoder-compare-color-popup',
    product: product,
    show_compare_color_drop_drap: show_compare_color_drop_drap,
    index: index
  %}
{%- endif -%}
<script>

  // Función que retorna los colores
  function obtenerColores() {
    return {
        ERROR: '#FF6565',
        OPCIONAL: '#B5B6BD',
        REQUERIDO: '#43B02A', 
        DEFAULT: '#000000'
    };
  }

  // Obtener de las colecciones de los productos una [handle1,handle2,.....,handleN]
  function coleccionesOfProduct() {
    const collections = {{ product.collections | json }};
    return collections
        .filter(collection => {
            const title = collection.title;
            const openIndex = title.indexOf('(');
            const closeIndex = title.indexOf(')');
            return openIndex !== -1 && closeIndex !== -1 && openIndex < closeIndex;
        })
        .map(({ handle }) => handle);
  }

  // Creacion del Query para la consulta 
  function createQuery(){
    let query = '{\n';

    coleccionesOfProduct().forEach((handle, index) => {
        query += `  coleccion${index + 1}: collectionByHandle(handle: "${handle}") {
            title
            description
            products(first: 250) {
                edges {
                    node {
                        id
                        title
                        description
                        tags
                        priceRange {
                            minVariantPrice {
                                amount
                                currencyCode
                            }
                        }
                        collections(first: 250) {
                            edges {
                                node {
                                    title
                                    description
                                }
                            }
                        }
                    }
                }
            }
        }\n`; 
    });

    query += '}';
    return query;
  }

  // Funcion de solicitud a la base de datos de shopify
  async function fetchShopifyData() {
     // Token Acceso APP ADMIN API
    const myTest = 'shpat_' + '45f4a7476152f4881d058f87ce063698';

    try {
        const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Access-Token': myTest
            },
            body: JSON.stringify({
                query: createQuery(),
                variables: {}
            })
        });
        
        const data = await response.json();
        console.log('Respuesta:', data); 
        return data; // Añadimos el return aquí
    } catch (error) {
        console.error('Error:', error);
        return null; // También es buena práctica retornar algo en caso de error
    }
  }

  // Función para limpiar el body_html en este caso es descripcion y obtener solo el texto
  function limpiarBodyHtml(html) {
    if (!html) return '';
    return html.replace(/<\/?p>/g, '').trim();
  }

  // Funcion para extrae el Nivel 
  function obtenerNivel(text) {
    if(!text) return -1;  // Si no hay texto, devuelve -1
    
    // Busca "Nivel: X" donde X es número
    const nivelMatch = text.match(/Nivel\s*:\s*(\d+)/);  
    
    // Devuelve el número o -1 si no encuentra
    return nivelMatch ? parseInt(nivelMatch[1]) : -1;
    
    // Resultado :
    // obtenerNivel("Nivel: 5")  // → 5
    // obtenerNivel("")         // → -1
  }

  // Función para extraer variables de la descripción
  function extraerVariablesDescripcion(descripcion) {
    const variables = {};
    
    // Eliminar todos los <br> de la descripción
    const descripcionLimpia = descripcion.replace(/<br>/gi, '');
    
    // Dividir la descripción por guiones
    const partes = descripcionLimpia.split('-').map(parte => parte.trim());
    
    // Procesar cada parte
    partes.forEach(parte => {
      // Dividir por los dos puntos
      const [clave, valor] = parte.split(':').map(item => item.trim());
      
      // Convertir la clave a camelCase y limpiar
      const claveNormalizada = clave.toLowerCase()
        .replace('tiposelect', 'tipoSelect'); // Manejar caso especial
      
      // Almacenar en el objeto, ignorando "Nivel"
      if (claveNormalizada !== 'nivel') {
        variables[claveNormalizada] = valor;
      }
    });
    
    return variables;
  }

  // Funcion para la creacion de un producto 
  function createProductObject(node) {
    return {
        id: node.id,
        title: node.title,
        description: node.description,
        tags: node.tags,
        price: {
            amount: (node.priceRange.minVariantPrice.amount / 100).toFixed(2),
            currencyCode: node.priceRange.minVariantPrice.currencyCode
        }
    };
  }

  // Funcion para verificar colecciones
  function verificarColecciones(colecciones,titulosRequeridos){
    return Array.from(titulosRequeridos).every(titulo => colecciones.has(titulo));
  }

  function parseProductDescription(description) {
    try {
      // Si la descripción está vacía o no es un string, retornar un array vacío
      if (!description || typeof description !== 'string') {
        return [];
      }
  
      // Intentar parsear el string JSON
      const parsed = JSON.parse(description);
      
      // Validar que el resultado sea un array
      if (!Array.isArray(parsed)) {
        return [];
      }
  
      // Validar y limpiar cada objeto en el array
      return parsed.map(item => {
        // Asegurar que todos los campos requeridos existan
        return {
          Nivel: Number(item.Nivel) || 0,
          Titulo: String(item.Titulo || ''),
          Min: Number(item.Min) || 0,
          Max: Number(item.Max) || 0,
          TipoSelect: String(item.TipoSelect || ''),
          items: Array.isArray(item.items) ? item.items : 
                 // Si items es un número largo, convertirlo a array de números
                 String(item.items).split(',').map(num => Number(num.trim())).filter(num => !isNaN(num))
        };
      }).filter(item => 
        // Filtrar objetos inválidos
        item.Nivel > 0 && 
        item.Titulo && 
        item.TipoSelect && 
        Array.isArray(item.items) && 
        item.items.length > 0
      );
    } catch (error) {
      console.error('Error parsing product description:', error);
      return [];
    }
  }
  

  /**
  * Esta función procesa y organiza datos de una tienda Shopify:
  * 1. Clasifica las colecciones existentes en tres niveles (2, 3 y 4)
  * 2. Obtiene todos los productos de la tienda usando GraphQL
  * 3. Extrae y organiza la información de cada producto incluyendo:
  *    - Información básica (id, título, descripción)
  *    - Precios
  *    - Colecciones asociadas
  * 4. Evita duplicados de productos
  * 5. Muestra los resultados organizados en consola
  */
  async function testPrueba() {
    // Arrays para mantener la lógica original
    const coleccionNivel2 = [];
    const coleccionNivel4 = [];
    const coleccionNivel3 = [];
    const productosNivel2y3 = [];
    const productosNivel4 = [];
  
    // Set para verificación rápida de IDs duplicados
    const idsNivel2y3 = new Set();
    const idsNivel4 = new Set();
  
    // Validación de paréntesis
    const tieneParentesisValidos = (titulo) => {
      return titulo.includes('(') && titulo.includes(')') && 
             titulo.indexOf('(') < titulo.indexOf(')');
    };
  
    // Procesar colecciones existentes de manera más eficiente
    const collections = {{ product.collections | json }};
    
    for (const collection of collections) {
      const handle = collection.handle;
      const title = collection.title;
      const description = limpiarBodyHtml(collection.body_html);
      const nivel = obtenerNivel(description);
      
      // Solo agregar colecciones con paréntesis válidos
      if (!tieneParentesisValidos(title)) continue;
      
      if (nivel === 2) {
        coleccionNivel2.push({ handle, title, description });
      } else if (nivel === 4) {
        coleccionNivel4.push({ handle, title, description });
      } else if (nivel === 3) {
        coleccionNivel3.push({ handle, title, description });
      }
    }
  
    /**
    * Almacenamiento en memoria (cache) de los títulos de colecciones usando Set
    * - Evita búsquedas repetitivas en la colección original
    * - Garantiza valores únicos mediante Set
    * - Mejora el rendimiento con acceso O(1) para búsquedas
    */
    const titulosNivel2 = new Set(coleccionNivel2.map(col => col.title));
    const titulosNivel3 = new Set(coleccionNivel3.map(col => col.title));
    const titulosNivel4 = new Set(coleccionNivel4.map(col => col.title));
  
    // Obtener datos de Shopify
    const respuesta = await fetchShopifyData();
    
    if (respuesta?.data) {
      // Procesar todos los productos de una vez
      const productosProcessados = Object.values(respuesta.data)
      .flatMap(coleccion => coleccion?.products?.edges || [])
      .filter(edge => edge?.node)
      .map(edge => {
        const node = edge.node;
        
        // Obtener y validar colecciones
        const todasColecciones = node.collections.edges.map(colEdge => ({
          title: colEdge.node.title,
          description: colEdge.node.description
        }));
    
        // Validación rápida de paréntesis
        if (!todasColecciones.every(col => tieneParentesisValidos(col.title))) {
          return null;
        }
    
        // Crear Set de títulos de las colecciones 
        const titulosColeccionesDelProducto = new Set(todasColecciones.map(col => col.title));
        
        // Verificar si tiene nivel 2
        const tieneNivel2 = verificarColecciones(titulosColeccionesDelProducto, titulosNivel2);
        
        // Verificar nivel 4 solo si NO tiene nivel 2
        if (!tieneNivel2) {
          // Verificar que TODAS las colecciones del producto sean de nivel 4
          const todasSonNivel4 = Array.from(titulosColeccionesDelProducto).every(titulo => 
            Array.from(titulosNivel4).includes(titulo)
          );
          
          // Si no todas son nivel 4, descartamos el producto
          if (!todasSonNivel4) {
            return null;
          }
          
          // Verificar que tiene al menos una colección nivel 4
          const tieneAlMenosUnNivel4 = Array.from(titulosColeccionesDelProducto).some(titulo => 
            Array.from(titulosNivel4).includes(titulo)
          );
          
          if (!tieneAlMenosUnNivel4) {
            return null;
          }
        }
    
        // Crear el objeto producto
        const producto = {
          ...createProductObject(node),
          collections: todasColecciones
        };
    
        return {
          producto,
          titulosColeccionesDelProducto,
          tieneNivel2,
          tieneNivel4: !tieneNivel2 // Solo será nivel 4 si NO es nivel 2
        };
      })
      .filter(Boolean);
    
      // Procesar y clasificar productos
      const productosPorNivel = productosProcessados.reduce((acc, { producto, titulosColeccionesDelProducto, tieneNivel2, tieneNivel4 }) => {
        // Si tiene nivel 2, verificar si también tiene nivel 3
        if (tieneNivel2 && verificarColecciones(titulosColeccionesDelProducto, titulosNivel3)) {
          if (!idsNivel2y3.has(producto.id)) {
            acc.nivel2y3.push(producto);
            idsNivel2y3.add(producto.id);
          }
        }
        // Si NO tiene nivel 2 pero SÍ tiene nivel 4
        else if (tieneNivel4 && !idsNivel4.has(producto.id)) {
          acc.nivel4.push(producto);
          idsNivel4.add(producto.id);
        }
        return acc;
      }, { nivel2y3: [], nivel4: [] });

      productosNivel2y3.push(
        ...productosPorNivel.nivel2y3.sort((a, b) => a.price.amount - b.price.amount)
      );

      productosNivel4.push(
        ...productosPorNivel.nivel4.sort((a, b) => a.price.amount - b.price.amount)
      );
    }

    const contendorPrincipal = document.querySelector('.sector-general-opciones-producto');
    coleccionNivel3.forEach((coleccion, indexCN3) => {
      const variables = extraerVariablesDescripcion(coleccion.description);
        
      // Variables que so obtenudas de la descripcion de la coleccion que se esta iterando
      const {variante, min, max,solicitud, tipoSelect} = variables;
      const minNum = parseInt(min) || 0;
      const maxNum = parseInt(max) || 1;
      //console.log(variables);
      
      const textoSeleccion = minNum === 0
          ? maxNum === 1
              ? 'Selecciona hasta un artículo'
              : `Selecciona hasta ${maxNum} artículos`
          : maxNum === 1
              ? 'Selecciona un artículo'
              : `Selecciona exactamente ${maxNum} aFrtículos`;

        const colorSolicitud = solicitud == 'Opcional' ? 'style="color: #B5B6BD !important;"' : '';
        let menuItemProducto = `<div class="menu-item-producto" id="menu-item-${indexCN3}" menu-item="${indexCN3}">`;

        let contenidoMenuItemHTML = `
        <div class="titulo-detalle-oferta-producto">
          <div id="titulo-detalle__comp1">
            <h2 class="titulo-base1">ELIGE ${variante.toUpperCase()}</h2>
            <span class="titulo-base2">${textoSeleccion}</span>
          </div>
          <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${solicitud.toUpperCase()}</span>
        </div>
        <div class="item-menuItem" data-group="${indexCN3}" data-min="${minNum}" data-max="${maxNum}" tipo-select="${tipoSelect}">
        `;

      let subItemProducto =  ``;

      // Filtrar productos específicos que son de nivel 3 
      const productosEspecificos = productosNivel2y3.filter(producto => {
        return producto.collections.some(col => col.title == coleccion.title);
      });

      productosEspecificos.forEach((productoMainItem, indexMainItem) => {
        // Como siempre será un solo elemento, podemos acceder directamente al primer tag
        const idProducto = productoMainItem.tags[0].match(/ID\s*:\s*(\d+)/i)?.[1];

        // Si no hay ID, no se muestra y se va al siguiente producto
        if (!idProducto) {
          return;
        }

        const precioProducto = parseFloat(productoMainItem.price?.amount || 0) > 0 
          ? `+Bs ${productoMainItem.price.amount}` 
          : '';

        if(tipoSelect === 'radio'){
          contenidoMenuItemHTML += `
          <div class="opcion-principal-detalle-oferta3" data-group="${indexCN3}" data-min="${minNum}" data-max="${maxNum}" data-producto-id="${idProducto}">
            <div class="producto-info3">
              <span class="producto-nombre3">${productoMainItem.title}</span>
              ${parseFloat(productoMainItem.price.amount) > 0 ? `<span class="producto-precio3">${precioProducto}</span>` : ''}
            </div>
            <div class="opcion-nombre1">
              <div class="hover-area1" id="hoverArea-${indexCN3}-${idProducto}"></div>
              <input
                type="radio"
                id="item-${indexCN3}-${idProducto}"
                name="opcion-grupo-${indexCN3}-${idProducto}"
                class="radio-input"
                data-group="${indexCN3}"
                data-min="${minNum}"
                data-max="${maxNum}"
                data-producto-id="${idProducto}"
                data-precio="${precioProducto}"
                onchange="validarLimiteRadio(this)"
              >
            </div>
          </div>
          `;
        }

        if(tipoSelect === 'numberCount'){
          contenidoMenuItemHTML += `
            <div class="opcion-principal-detalle-oferta2" menu-item="${indexCN3}" data-min="${minNum}" data-max="${maxNum}" id-producto="${idProducto}" precio-producto="${precioProducto}">
              <div class="producto-info2">
                <span class="producto-nombre2">${productoMainItem.title}</span>
                ${productoMainItem.price.amount > 0 ? `<span class="producto-precio2">+Bs${productoMainItem.price.amount}</span>` : ''}
              </div>

              <div class="controles-cantidad2" 
                  data-group="${indexCN3}" 
                  data-index="${indexMainItem}"
                  data-min="${minNum}"
                  data-max="${maxNum}"
                  data-producto-id="${idProducto}"
                  data-precio="${precioVariante}">
                <button type="button" class="btn-cantidad2" onclick="decrementCantidad(this)">
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
                <p class="cantidad-display2">0</p>
                <button type="button" class="btn-cantidad2" onclick="incrementarCantidad(this)">
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
              </div>
            </div>
          `;
        }

        if(tipoSelect === 'checkbox'){
          contenidoMenuItemHTML += `
            <div class="opcion-principal-detalle-oferta3" data-min="${minNum}" data-max="${maxNum}" id-producto="${idProducto}" precio-producto="${precioProducto}">
              <div class="producto-info3">
                <span class="producto-nombre3">${productoMainItem.title}</span>
                ${parseFloat(productoMainItem.price.amount) > 0 ? `<span class="producto-precio3">+Bs${productoMainItem.price.amount}</span>` : ''}
              </div>
              <div class="control-checkbox3">
                <div class="checkbox-container3">
                  <input
                    type="checkbox"
                    id="item-${indexCN3}-${indexMainItem}"
                    name="properties[${productoMainItem.title}]"
                    class="input-checkbox3"
                    data-group="${indexCN3}"
                    data-producto-id="${idProducto}"
                    data-min="${minNum}"
                    data-max="${maxNum}"
                    onchange="validarLimiteCheckbox(this)"
                  >
                </div>
              </div>
            </div>
          `;
        }

        // Sale de la iteración actual si es que la descripcion de producto "productoMainItem" esta vacia
        if (!productoMainItem.description || productoMainItem.description.trim() === '') {
          return;
        }

        // Parsear datos de la descripcion para usar la data de esa informacion 
        const itemsSubSeccionProducto = parseProductDescription(productoMainItem.description);
        if (itemsSubSeccionProducto.length === 0) {
          return;
        }

        itemsSubSeccionProducto.forEach((detalleProducto,indexProducto) => {
          const { Nivel, Titulo, Min, Max, TipoSelect, items } = detalleProducto;

          // Si el Minimo es 1 y Max es (N>0) tons es Requerida 
          // Si el Minimo es 0 y Max es (N>0) tons es Opcional 
          const textoSeleccion = Min === 0 
          ? Max === 1 
              ? 'Selecciona hasta un artículo'
              : `Selecciona hasta ${Max} artículos`
          : Max === 1
              ? 'Selecciona un artículo'
              : `Selecciona exactamente ${Max} artículos`;

          const colorSolicitud = Min === 0 ? 'style="color: #B5B6BD !important;"' : '';
          const tipoSolicitud = Min === 0 ? 'OPCIONAL' : 'REQUERIDO';
          subItemProducto += `<div 
            class="sub-item-producto" 
            data-parent-group="${indexCN3}"
            data-sub-item="${indexProducto}"
            data-producto-id="${idProducto}"
            data-min="${Min}"
            data-max="${Max}"
            
          >`;

          let contenidoSubItemHTML = `
            <div class="titulo-detalle-oferta-producto">
              <div id="titulo-detalle__comp1">
                <h2 class="titulo-base1">ELIGE ${Titulo.toUpperCase()}</h2>
                <span class="titulo-base2">${textoSeleccion}</span>
              </div>
              <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${tipoSolicitud}</span>
            </div>
            <div class="item-subItem" data-group="${indexProducto}" data-min="${Min}" data-max="${Max}" tipo-select="${TipoSelect}">
            `;

          // IDs de todos los productos de la coleccion actual
          items.forEach((item, indexItem) => {
            // item es el numero del producto que tiene para escoger

            // Buscar el producto que tenga el item (número) en sus tags
            const productoTrabajo = productosNivel4.find(producto => {
              try{
                // Intentar parsear la descripcion de producto que contiene las variantes
                const variantesData = JSON.parse(producto.description.match(/Variantes\s*:\s*(\[.*?\])/)[1]);

                // Buscar si alguna variante coincide con el ID del item actual
                return variantesData.some(variante => variante.id.toString() === item.toString());
              }catch(error){
                // Si hay error en el parseo, este producto no es el correcto
                return false; 
              }
            });

            // Si no se encuentra el producto, saltamos esta iteracion
            if(!productoTrabajo) return;

            // Obtener los detalles de la variante especifica
            const variantesData = JSON.parse(productoTrabajo.description.match(/Variantes\s*:\s*(\[.*?\])/)[1]);
            const varianteActual = variantesData.find(variante => variante.id.toString() === item.toString());

            //  Solo proceder si la variante esta activa
            if(varianteActual && varianteActual.estado === "activo"){
              // Usar el precio de la variante en lugar del precio de producto base 
              const precioVariante = parseFloat(varianteActual.precio);

              if(TipoSelect === 'radio') {
                contenidoSubItemHTML += `
                  <div class="opcion-principal-detalle-oferta3">
                    <div class="producto-info3">
                      <span class="producto-nombre3">${productoTrabajo.title}</span>
                      ${precioVariante > 0 ? `<span class="producto-precio3">+Bs${precioVariante}</span>` : ''}
                    </div>
                    <div class="opcion-nombre1">
                      <div class="hover-area1" id="hoverArea-${indexProducto}-${indexItem}"></div>
                      <input
                        type="radio"
                        id="item-${indexProducto}-${indexItem}"
                        name="opcion-grupo-${indexProducto}"
                        class="radio-input"
                        data-group="${indexProducto}"
                        data-min="${Min}"
                        data-max="${Max}"
                        data-producto-id="${item}"
                        data-producto-price="${precioVariante}"
                        onchange="validarLimiteRadio(this)"
                      >
                    </div>
                  </div>
                `;
              }
          
              if(TipoSelect === 'numberCount') {
                contenidoSubItemHTML += `
                  <div class="opcion-principal-detalle-oferta2">
                    <div class="producto-info2">
                      <span class="producto-nombre2">${productoTrabajo.title}</span>
                      ${precioVariante > 0 ? `<span class="producto-precio2">+Bs${precioVariante}</span>` : ''}
                    </div>
                    <div class="controles-cantidad2" 
                        data-group="${indexCN3}"
                        data-group-product-id="${idProducto}"
                        data-subgroup="${indexProducto}"
                        data-producto-id="${item}"
                        data-min="${Min}"
                        data-max="${Max}"
                        data-precio="${precioProducto}">
                      <button type="button" class="btn-cantidad2" onclick="decrementCantidad(this)">
                         <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                          <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                        </svg>
                      </button>
                      <p class="cantidad-display2" >0</p>
                     <button type="button" class="btn-cantidad2" onclick="incrementarCantidad(this)">
                        <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                          <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                `;
              }
          
              if(TipoSelect === 'checkbox') {
                contenidoSubItemHTML += `
                  <div class="opcion-principal-detalle-oferta3">
                    <div class="producto-info3">
                      <span class="producto-nombre3">${productoTrabajo.title}</span>
                      ${precioVariante > 0 ? `<span class="producto-precio3">+Bs${precioVariante}</span>` : ''}
                    </div>
                    <div class="control-checkbox3">
                      <div class="checkbox-container3">
                        <input
                          type="checkbox"
                          id="item-${indexProducto}-${indexItem}"
                          name="properties[${productoTrabajo.title}]"
                          class="input-checkbox3"
                          data-group="${indexProducto}"
                          data-min="${Min}"
                          data-max="${Max}"
                          data-producto-id="${item}"
                          data-producto-price="${precioVariante}"
                          onchange="validarLimiteCheckbox(this)"
                        >
                      </div>
                    </div>
                  </div>
                `;
              }
            }
          });


          // Cerrar el contenidoSubItemHTML
          contenidoSubItemHTML += `</div>`;
          
          // Añadir el contenidoSubItemHTML al subItemProducto
          subItemProducto += contenidoSubItemHTML + `</div>`;
        });
      });

      // Primero construir y cerrar el menuItem completo
      menuItemProducto += contenidoMenuItemHTML;
      contenidoMenuItemHTML += `</div>`; 
      menuItemProducto += `</div>`;

      // Añadir el menuItem al contenedor
      contendorPrincipal.innerHTML += menuItemProducto;

      // Añadir los subItems al mismo nivel (si existen)
      if (subItemProducto) {
        contendorPrincipal.innerHTML += subItemProducto;
      }
    });

  
    // Imprimir resultados
    // console.log('Colecciones Nivel 2:', coleccionNivel2);
    // console.log('Colecciones Nivel 3:', coleccionNivel3);
    // console.log('Colecciones Nivel 4:', coleccionNivel4);
    // console.log('Productos Nivel 2 y 3:', productosNivel2y3);
    // console.log('Productos Nivel 4:', productosNivel4); 
  
    return {
      colecciones: {
        nivel2: coleccionNivel2,
        nivel3: coleccionNivel3,
        nivel4: coleccionNivel4
      },
      productosNivel2y3,
      productosNivel4
    };
  }

  // Control de selecciones y validaciones para menu-item-producto y sub-item-producto
  function initializeProductMenu() {
    // Marcar opciones predefinidas cuando es requerido
    marcarOpcionesRequeridas();
    // Inicializar visibilidad de sub-items
    actualizarVisibilidadSubItems();
    // Verificar estados iniciales
    // verificarRequeridos();
  }

  // Funcion para marcar opciones requeridas
  function marcarOpcionesRequeridas() {
    // Procesar todos los elementos en una sola pasada
    document.querySelectorAll('.menu-item-producto, .sub-item-producto').forEach(elemento => {
        const esSubItem = elemento.classList.contains('sub-item-producto');
        
        // Actualizar botones incluso si no es requerido
        if (!esElementoRequerido(elemento)) {
          actualizarBotonesNumberCount(elemento);
            return;
        }

        // Obtener el contenedor y atributos una sola vez
        const contenedor = esSubItem ? 
            elemento.querySelector('.item-subItem') : 
            elemento.querySelector('.item-menuItem');
            
        if (!contenedor) return;

        const min = parseInt(contenedor.getAttribute('data-min') || '0');
        const max = parseInt(contenedor.getAttribute('data-max') || min);

        // Procesar todos los tipos de controles
        const controles = {
            radio: contenedor.querySelectorAll('input[type="radio"]'),
            numero: contenedor.querySelectorAll('.opcion-principal-detalle-oferta2'),
            checkbox: contenedor.querySelectorAll('input[type="checkbox"]')
        };

        // Procesar radio buttons si existen y son requeridos
        if (controles.radio.length > 0 && min > 0) {
            controles.radio[0].checked = true;
            triggerChange(controles.radio[0]);
        }

        // Procesar controles numéricos si existen y son requeridos
        if (controles.numero.length > 0 && min > 0) {
            let restante = min;
            let index = 0;

            while (restante > 0 && index < controles.numero.length) {
                const display = controles.numero[index].querySelector('.cantidad-display2');
                if (display) {
                    display.textContent = '1';
                    restante--;
                }
                index++;
            }
            actualizarBotonesNumberCount(elemento);
        }

        // Procesar checkboxes si existen y son requeridos
        if (controles.checkbox.length > 0 && min > 0) {
            const cantidadAMarcar = Math.min(min, controles.checkbox.length);
            for (let i = 0; i < cantidadAMarcar; i++) {
                controles.checkbox[i].checked = true;
                triggerChange(controles.checkbox[i]);
            }
        }
    });

    verificarRequeridos();
  }

  // Función para actualizar botones de controles numéricos
  function actualizarBotonesNumberCount(containerTrabajo) {
    const COLORS = obtenerColores();
    const max = parseInt(containerTrabajo.dataset.max || '0');
    
    const controles = containerTrabajo.querySelectorAll('.controles-cantidad2');
    if (!controles.length) return;
    
    const sumaTotal = Array.from(containerTrabajo.querySelectorAll('.cantidad-display2'))
        .reduce((sum, display) => sum + parseInt(display?.textContent || '0'), 0);

    controles.forEach(control => {
        const cantidad = parseInt(control.querySelector('.cantidad-display2')?.textContent || '0');
        const [botonMenos, botonMas] = [
            control.querySelector('button:first-child'),
            control.querySelector('button:last-child')
        ];

        const deshabilitarMas = sumaTotal >= max;
        const deshabilitarMenos = cantidad === 0;

        [
            [botonMas, deshabilitarMas],
            [botonMenos, deshabilitarMenos]
        ].forEach(([boton, deshabilitar]) => {
            if (boton) {
                boton.disabled = deshabilitar;
                boton.style.setProperty('fill', deshabilitar ? COLORS.OPCIONAL : '', 'important');
                boton.style.setProperty('cursor', deshabilitar ? 'not-allowed' : 'pointer', 'important');
            }
        });
    });
  }

  // Funcion para incrementar cantidad en controles numéricos
  function incrementarCantidad(elemento) {
    const controlCantidad = elemento.closest('.controles-cantidad2');
    const display = controlCantidad?.querySelector('.cantidad-display2');
    if (!display) return;

    const contenedor = elemento.closest('.sub-item-producto') || elemento.closest('.menu-item-producto');
    if (!contenedor) return;

    const max = parseInt(controlCantidad?.dataset.max || '0');
    let sumaActual = 0;
    contenedor.querySelectorAll('.cantidad-display2').forEach(d => 
        sumaActual += parseInt(d.textContent || '0')
    );

    if (sumaActual < max) {
        display.textContent = (parseInt(display.textContent || '0') + 1).toString();
        actualizarBotonesNumberCount(contenedor);
        verificarRequeridos();
    }
  }
  
  // Función para decrementar cantidad en controles numéricos
  function decrementCantidad(elemento) {
    const controlCantidad = elemento.closest('.controles-cantidad2');
    const display = controlCantidad?.querySelector('.cantidad-display2');
    if (!display) return;

    const valorActual = parseInt(display.textContent || '0');
    if (valorActual <= 0) return;

    const contenedor = elemento.closest('.sub-item-producto') || elemento.closest('.menu-item-producto');
    if (!contenedor) return;

    const contenedorPrincipal = controlCantidad.closest('.opcion-principal-detalle-oferta2');
    const min = parseInt(contenedorPrincipal?.dataset.min || '0');
    let sumaActual = 0;
    contenedor.querySelectorAll('.cantidad-display2').forEach(d => 
        sumaActual += parseInt(d.textContent || '0')
    );

    if (sumaActual > min) {
        display.textContent = (valorActual - 1).toString();
        actualizarBotonesNumberCount(contenedor);
        verificarRequeridos();
    }
  }

  // Función corregida para marcar opciones requeridas
  function esElementoRequerido(elemento) {
    const solicitudElement = elemento.querySelector('.titulo-detalle-seleccion');
    if (!solicitudElement) return false;
    
    // Comprueba si es REQUERIDO explícitamente
    const esRequeridoExplicito = solicitudElement.textContent.trim() === 'REQUERIDO';
    
    // También comprueba el mínimo requerido
    const contenedor = elemento.querySelector('.item-menuItem') || elemento.querySelector('.item-subItem');
    if (!contenedor) return esRequeridoExplicito;
    
    const minRequerido = parseInt(contenedor.getAttribute('data-min') || '0');
    return esRequeridoExplicito || minRequerido > 0;
  }

  function esElementoRequerido(elemento) {
    const solicitudElement = elemento.querySelector('.titulo-detalle-seleccion');
    if (!solicitudElement) return false;
    
    // Comprueba si es REQUERIDO explícitamente
    const esRequeridoExplicito = solicitudElement.textContent.trim() === 'REQUERIDO';
    
    // También comprueba el mínimo requerido
    const contenedor = elemento.querySelector('.item-menuItem') || elemento.querySelector('.item-subItem');
    if (!contenedor) return esRequeridoExplicito;
    
    const minRequerido = parseInt(contenedor.getAttribute('data-min') || '0');
    return esRequeridoExplicito || minRequerido > 0;
  }

  // Control de visibilidad de sub-items
  function actualizarVisibilidadSubItems() {
    // Ocultar todos los sub-items inicialmente
    document.querySelectorAll('.sub-item-producto').forEach(subItem => {
      subItem.style.display = 'none';
    });

    // Mostrar sub-items relacionados con elementos seleccionados
    document.querySelectorAll('.menu-item-producto').forEach(menuItem => {
      const menuItemId = menuItem.getAttribute('menu-item');

      // Verificar elementos seleccionados
      // Radio buttons
      const radiosSeleccionados = menuItem.querySelectorAll('input[type="radio"]:checked');
      radiosSeleccionados.forEach(radio => {
        const idProducto = radio.getAttribute('id-producto');
        mostrarSubItemsRelacionados(menuItemId, idProducto);
      });

      // Checkboxes
      const checkboxesSeleccionados = menuItem.querySelectorAll('input[type="checkbox"]:checked');
      checkboxesSeleccionados.forEach(checkbox => {
        const idProducto = checkbox.getAttribute('id-producto');
        mostrarSubItemsRelacionados(menuItemId, idProducto);
      });

      // NumberCount
      const contadoresActivos = menuItem.querySelectorAll('.cantidad-display2');
      contadoresActivos.forEach(display => {
        if (parseInt(display.textContent) > 0) {
          const contenedor = display.closest('.opcion-principal-detalle-oferta2');
          const idProducto = contenedor.getAttribute('id-producto');
          mostrarSubItemsRelacionados(menuItemId, idProducto);
        }
      });
    });
  }

  function mostrarSubItemsRelacionados(grupo, productoId) {
    document.querySelectorAll(
      `.sub-item-producto[data-parent-group="${grupo}"][data-producto-id="${productoId}"]`
    ).forEach(subItem => {
      subItem.style.display = 'block';
    });
  }

  // Funciones de validación
  function validarLimiteCheckbox(checkbox) {  
    const contenedor = checkbox.closest('.item-menuItem, .item-subItem');
    const min = parseInt(contenedor.getAttribute('data-min'));
    const max = parseInt(contenedor.getAttribute('data-max'));
    const grupo = checkbox.getAttribute('data-group');
    const productoId = checkbox.getAttribute('data-producto-id');
    
    const checkboxesSeleccionados = contenedor.querySelectorAll('input[type="checkbox"]:checked');
    
    // Si está marcando y excede el máximo
    if (checkbox.checked && checkboxesSeleccionados.length > max) {
        // Desmarca el primer checkbox seleccionado
        checkboxesSeleccionados[0].checked = false;
    }

    // Maneja visibilidad de sub-items
    if (checkbox.checked) {
        mostrarSubItemsRelacionados(grupo, productoId);
    } else {
        document.querySelectorAll(`.sub-item-producto[data-parent-group="${grupo}"][data-producto-id="${productoId}"]`)
            .forEach(item => item.style.display = 'none');
    }

    verificarRequeridos();
  }

  // Función para validar radio buttons
  function validarLimiteRadio(radio) {
    const contenedor = radio.closest('.item-menuItem, .item-subItem');
    const grupo = radio.getAttribute('data-group');
    const productoId = radio.getAttribute('data-producto-id');
    const min = parseInt(contenedor.getAttribute('data-min'));
    const max = parseInt(contenedor.getAttribute('data-max'));
    
    if (radio.checked) {
        // Desmarca otros radios del mismo grupo
        contenedor.querySelectorAll('input[type="radio"]:checked').forEach(otherRadio => {
            if (otherRadio !== radio) {
                otherRadio.checked = false;
            }
        });
        
        // Oculta/muestra sub-items
        document.querySelectorAll(`.sub-item-producto[data-parent-group="${grupo}"]`)
            .forEach(item => item.style.display = 'none');
        mostrarSubItemsRelacionados(grupo, productoId);
        recolectarDatosSeleccionados();
    } else if (min > 0) {
        // Si es requerido, asegura que al menos uno esté seleccionado
        const radiosSeleccionados = contenedor.querySelectorAll('input[type="radio"]:checked').length;
        if (radiosSeleccionados === 0) {
            radio.checked = true;
            recolectarDatosSeleccionados();
        }
    }
    
    verificarRequeridos();
  }

  function verificarRequeridos() {
    const COLORS = obtenerColores();
  
    document.querySelectorAll('.menu-item-producto, .sub-item-producto').forEach(item => {
      const esSubItem = item.classList.contains('sub-item-producto');
      const itemMenuDiv = esSubItem ? 
        item.querySelector('.item-subItem') : 
        item.querySelector('.item-menuItem');
      const solicitudElement = item.querySelector('.titulo-detalle-seleccion');
      const esRequerido = solicitudElement.textContent.trim() === 'REQUERIDO';
      
      const minimo = parseInt(itemMenuDiv.getAttribute('data-min') || '0');
      const maximo = parseInt(itemMenuDiv.getAttribute('data-max') || minimo.toString());

  
      let cantidadSeleccionada = 0;
  
      if (itemMenuDiv.querySelector('input[type="radio"]')) {
        cantidadSeleccionada = itemMenuDiv.querySelectorAll('input[type="radio"]:checked').length;
      } else if (itemMenuDiv.querySelector('.controles-cantidad2')) {
        cantidadSeleccionada = Array.from(itemMenuDiv.querySelectorAll('.cantidad-display2'))
          .reduce((sum, display) => sum + parseInt(display.textContent || '0'), 0);
      } else if (itemMenuDiv.querySelector('input[type="checkbox"]')) {
        cantidadSeleccionada = itemMenuDiv.querySelectorAll('input[type="checkbox"]:checked').length;
      }
  
      const cumpleMinimo = cantidadSeleccionada >= minimo;
      const cumpleMaximo = cantidadSeleccionada <= maximo;
      
      let colorElementos, colorSolicitud;
      
      if (esRequerido || minimo > 0) {
        if (!cumpleMinimo) {
          colorElementos = COLORS.ERROR;
          colorSolicitud = COLORS.ERROR;
        } else {
          colorElementos = COLORS.DEFAULT;
          colorSolicitud = COLORS.REQUERIDO;
        }
      } else {
        colorElementos = COLORS.DEFAULT;
        colorSolicitud = COLORS.OPCIONAL;
      }
  
      if (!cumpleMaximo) {
        colorElementos = COLORS.ERROR;
        colorSolicitud = COLORS.ERROR;
      }
  
      const elementosTexto = item.querySelectorAll('.titulo-base1, .titulo-base2');
      const nombresProductos = item.querySelectorAll('.producto-nombre2, .producto-nombre3');
      
      elementosTexto.forEach(el => el.style.setProperty('color', colorElementos, 'important'));
      nombresProductos.forEach(el => el.style.setProperty('color', colorElementos, 'important'));
      solicitudElement.style.setProperty('color', colorSolicitud, 'important');
    });
  }

  function tieneOtrosElementosConValor(grupo, currentItemId) {
    const displays = document.querySelectorAll(`.controles-cantidad2[data-group="${grupo}"] .cantidad-display2`);
    return Array.from(displays).some(display => {
        return display.id !== `cantidad-${currentItemId}` && parseInt(display.textContent || '0') > 0;
    });
  }
  
  function obtenerSumaGrupo(grupo) {
    const displays = document.querySelectorAll(`.controles-cantidad2[data-group="${grupo}"] .cantidad-display2`);
    return Array.from(displays).reduce((sum, display) => sum + parseInt(display.textContent || '0'), 0);
  }

  // Helper function to trigger change events
  function triggerChange(element) {
    const event = new Event('change', {
      bubbles: true,
      cancelable: true,
    });
    element.dispatchEvent(event);
  }

  function agregarAlCarrito() {
    let formData = {
      'items': [{
        'id': 51079772569884,
        'quantity': 1
      }]
    };
  
    console.log('Datos a enviar:', formData);
  
    fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      console.log('Respuesta cruda:', response);
      return response.json();
    })
    .then(data => {
      console.log('Datos del producto agregado:', data);
      return data;
    })
    .catch((error) => {
      console.error('Error al agregar al carrito:', error);
    });
  }

  // Funcion Recolectar datos seleccionados
  function recolectarDatosSeleccionados(){
    // Objeto para almacenar los items 
    let items = [];

    // Buscar el contendor principal
    const contendorPrincipal = document.querySelector('.sector-general-opciones-producto');
    if(!contendorPrincipal) return;

    // Buscar todos los menu-item-producto
    const menuItemsProducto = contendorPrincipal.querySelectorAll('.menu-item-producto');

    menuItemsProducto.forEach(menuItemProducto => {
      // Buscar solo el elemento
      const menuItem = menuItemProducto.querySelector('.item-menuItem');
      if(!menuItem) return;

      const tipoSelect = menuItem.getAttribute('tipo-select'); 

        if(tipoSelect === 'radio'){
          // Buscar input radios seleccionados
          const radiosSeleccionados = menuItem.querySelectorAll('input[type="radio"]:checked');
          radiosSeleccionados.forEach(radio => {
            const idProducto = radio.getAttribute('data-producto-id');
            if(idProducto){
              items.push({
                'id': parseInt(idProducto),
                'quantity': 1
              });

              // Buscar todos los .sub-item-producto con data-producto-id="idProducto"
              const subItemsProducto = contendorPrincipal.querySelectorAll(`.sub-item-producto[data-producto-id="${idProducto}"]`);
              console.log(subItemsProducto);
              subItemsProducto.forEach(subItemProducto => {
                const subItem = subItemProducto.querySelector('.item-subItem');
                if(!subItem) return;

                const tipoSelect = subItem.getAttribute('tipo-select');

                if(tipoSelect === 'radio'){
                  // Buscar input radios seleccionados para el sub-item
                  const radiosSubSeleccionados = subItem.querySelectorAll('input[type="radio"]:checked');
                  radiosSubSeleccionados.forEach(radioSub => {
                    const idSubProducto = radioSub.getAttribute('data-producto-id');
                    if(idSubProducto){
                      items.push({
                        'id': parseInt(idSubProducto),
                        'quantity': 1
                      });
                    }
                  });
                }
              });
            }
          });
        }else if (tipoSelect === 'checkbox'){
          // Buscar input checkbox seleccionados
          const checkboxesSeleccionados = menuItem.querySelectorAll('input[type="checkbox"]:checked');
          checkboxesSeleccionados.forEach(checkbox => {
            const idProducto = checkbox.getAttribute('data-producto-id');
            if(idProducto){
              items.push({
                'id': parseInt(idProducto),
                'quantity': 1
              });

              // Buscar sub-items para checkbox seleccionado
              const subItemsProducto = contendorPrincipal.querySelectorAll(`.sub-item-producto[data-producto-id="${idProducto}"]`);
              subItemsProducto.forEach(subItemProducto => {
                const subItem = subItemProducto.querySelector('.item-subItem');
                if(!subItem) return;

                const tipoSelect = subItem.getAttribute('tipo-select');

                if(tipoSelect === 'checkbox'){
                  // Buscar input checkbox seleccionados para el sub-item
                  const checkboxesSubSeleccionados = subItem.querySelectorAll('input[type="checkbox"]:checked');
                  checkboxesSubSeleccionados.forEach(checkboxSub => {
                    const idSubProducto = checkboxSub.getAttribute('data-producto-id');
                    if(idSubProducto){
                      items.push({
                        'id': parseInt(idSubProducto),
                        'quantity': 1
                      });
                    }
                  });
                }
              });
            }
          });
        }else if (tipoSelect === 'numberCount'){
          // Buscar controles de cantidad seleccionados
          const controlesCantidad = menuItem.querySelectorAll('.controles-cantidad2');
          controlesCantidad.forEach(control => {
            const cantidad = parseInt(control.querySelector('.cantidad-display2').textContent || '0');
            const idProducto = control.getAttribute('id-producto');
            if(idProducto && cantidad > 0){
              items.push({
                'id': parseInt(idProducto),
                'quantity': cantidad
              });

              // Buscar sub-items para numberCount seleccionado
              const subItemsProducto = contendorPrincipal.querySelectorAll(`.sub-item-producto[data-producto-id="${idProducto}"]`);
              subItemsProducto.forEach(subItemProducto => {
                const subItem = subItemProducto.querySelector('.item-subItem');
                if(!subItem) return;

                const tipoSelect = subItem.getAttribute('tipo-select');

                if(tipoSelect === 'numberCount'){
                  // Buscar controles de cantidad para el sub-item
                  const controlesCantidadSub = subItem.querySelectorAll('.controles-cantidad2');
                  controlesCantidadSub.forEach(controlSub => {
                    const cantidadSub = parseInt(controlSub.querySelector('.cantidad-display2').textContent || '0');
                    const idSubProducto = controlSub.getAttribute('id-producto');
                    if(idSubProducto && cantidadSub > 0){
                      items.push({
                        'id': parseInt(idSubProducto),
                        'quantity': cantidadSub
                      });
                    }
                  });
                }
              });
            }
          });
        }
    });

    // Crear el objeto formData
    const formData = {
        'items': items
    };

    // Imprimir en consola
    console.log('FormData recolectado:', formData);
    return formData;
  }

  function precioValoresSeleccionados(){
    let precioTotal = 0;



    return precioTotal;
  }

  function updateValoresDeBajoOpciones(){}

  function agregarValoresDeBajoOpciones() {
    const precioCarrito = ({{ cart.total_price | json }} / 100).toFixed(2);
    const precioProductoActual = ({{ product.price | json }} / 100).toFixed(2); 
    const precioMenuSubItemsProducto = precioValoresSeleccionados().toFixed(2);

    // Boton de "Agregar al carrito"
    const elementoBotonAgregarCarrito = document.querySelector('.etiqueta-agregar-carrito');
    if (elementoBotonAgregarCarrito) {
        elementoBotonAgregarCarrito.textContent = `Bs${(Number(precioCarrito) + Number(precioProductoActual) + Number(precioMenuSubItemsProducto)).toFixed(2)}`;
    }

    // Boton de Comprar Ahora
    const botonComprarAhora = document.querySelector('.shopify-payment-button__button.shopify-payment-button__button--unbranded');
    if (botonComprarAhora) {
        // Crear el elemento p
        const etiquetaPrecio = document.createElement('p');
        etiquetaPrecio.classList.add('etiqueta-comprar-ahora');
        etiquetaPrecio.textContent = `Bs${(Number(precioProductoActual) + Number(precioMenuSubItemsProducto)).toFixed(2)}`;

        // Agregar el elemento p dentro del botón
        botonComprarAhora.appendChild(etiquetaPrecio);
    }
  }

  // Para asegurarte de que el DOM está cargado
  //document.addEventListener('DOMContentLoaded', function() {
  //    agregarValorDebajoBuyButton();
  //});
  (function() {
    function initializeShopifyProduct() {
        return testPrueba()
            .then(() => {
                 initializeProductMenu(); 
                  {% comment %} agregarAlCarrito(3); {% endcomment %}
                  agregarValoresDeBajoOpciones(); 
                console.log('Producto inicializado correctamente');
            })
            .catch(error => {
                console.error('Error durante la inicialización:', error);
            });
    }

    // Función que intenta inicializar
    function tryInitialize() {
        // Verificar si el elemento contenedor existe
        const contenedor = document.querySelector('.sector-general-opciones-producto');
        if (!contenedor) {
            console.log('Contenedor no encontrado, reintentando...');
            setTimeout(tryInitialize, 100); // Reintentar en 100ms
            return;
        }

        initializeShopifyProduct();
    }

    // Manejo de diferentes eventos de carga
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', tryInitialize);
    } else {
        tryInitialize();
    }

    // Backup: Si algo falla, intentar en window.load
    window.addEventListener('load', function() {
        const contenedor = document.querySelector('.sector-general-opciones-producto');
        if (!contenedor) {
            tryInitialize();
        }
    });
  })();
</script>
