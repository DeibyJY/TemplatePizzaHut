{%- liquid
  assign primera_coleccion = collections | first

  assign layout = settings.quick_view_layout
  assign max_thumbnail_to_show = settings.thumbnail_to_show
  assign current_variant = product.selected_or_first_available_variant
  assign variantCount = product.variants | size
  assign featured_media_aspect_ratio = product.featured_media.aspect_ratio
  if product.featured_media.aspect_ratio == null
    assign featured_media_aspect_ratio = 1
  endif
  assign media_size = settings.quick_view_product_image_ratio
  assign portrait_aspect_ratio = settings.quick_view_portrait_aspect_ratio | append: '%'
  assign quick_view_zoomed_image = settings.quick_view_zoomed_image
  assign show_quick_view_badge = settings.show_quick_view_badge
  assign fontsize_text = settings.fontsize_text
  assign color_title = settings.color_title
  assign show_quick_view_review = settings.show_quick_view_review
  assign word_number_short_desc = settings.word_number_short_desc
  assign fontsize_short_desc = settings.fontsize_short_desc
  assign color_short_desc = settings.color_short_desc
  assign show_quick_view_sold_in = settings.show_quick_view_sold_in
  if show_quick_view_sold_in
    assign quick_view_sold_in_number = settings.quick_view_sold_in_number
    assign quick_view_sold_in_hours = settings.quick_view_sold_in_hours
  endif
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign show_quick_view_short_description = settings.show_quick_view_short_description
  assign fontsize_price = settings.fontsize_price
  assign show_countdown = settings.show_countdown
  if show_countdown
    assign countdown_type = settings.countdown_type
    assign countdown_time = settings.countdown_time
    assign countdown_collection = settings.countdown_collection | downcase | handle
    assign countdown_style = settings.countdown_style
  endif
  assign show_quick_view_vendor = settings.show_quick_view_vendor
  assign show_quick_view_availability = settings.show_quick_view_availability
  assign show_quick_view_sku = settings.show_quick_view_sku
  assign show_quick_view_product_type = settings.show_quick_view_product_type
  assign quick_view_picker_type = settings.quick_view_picker_type
  assign stock_level_display = settings.stock_level_display
  assign show_hot_stock = settings.show_hot_stock
  if show_hot_stock
    assign productMaxStock = settings.hot_stock_limit | plus: 0
  endif
  assign show_quick_view_qty = settings.show_quick_view_qty
  assign show_quick_view_subtotal = settings.show_quick_view_subtotal
  assign show_subtotal = false
  assign subtotal = 0
  if show_quick_view_subtotal and show_quick_view_qty
    assign show_subtotal = true
    assign subtotal = current_variant.price | money
  endif
  assign show_dynamic_checkout = settings.show_dynamic_checkout
  assign show_quick_view_customer_viewing = settings.show_quick_view_customer_viewing
  if show_quick_view_customer_viewing
    assign quick_view_customer_viewing_number = settings.quick_view_customer_viewing_number
    assign quick_view_customer_viewing_time = settings.quick_view_customer_viewing_time
  endif
  assign show_quick_view_trust_image = settings.show_quick_view_trust_image
  assign show_quick_view_share = settings.show_quick_view_share
  if show_quick_view_share
    assign share_product_script = settings.share_product_script
  endif

  assign show_customization_option = settings.show_customization_option
  if show_customization_option
    assign has_customization_option = false
    assign customization_option_type = settings.customization_option_type
    assign customization_option_hidden = settings.customization_option_hidden
    if customization_option_type == 'all'
      assign has_customization_option = true
    elsif customization_option_type == 'tag'
      assign customization_option_tags = settings.customization_option_tags | downcase | strip | split: ','
      for tag in customization_option_tags
        assign tagtitle = tag | strip
        assign productTag = product.tags | downcase
        if productTag contains tagtitle
          assign has_customization_option = true
        endif
      endfor
    elsif customization_option_type == 'collection'
      assign customization_option_collection = settings.customization_option_collection | downcase | handle
      if customization_option_collection != blank
        for collection in product.collections
          assign collection_title = collection.title | downcase | handle
          if collection_title == customization_option_collection
            assign has_customization_option = true
          endif
        endfor
      endif
    endif
    assign customization_option_1 = settings.customization_option_1
    assign customization_option_2 = settings.customization_option_2
  endif
  assign show_quick_view_variant_image_group = settings.show_quick_view_variant_image_group
-%}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{
      padding-bottom: {{ portrait_aspect_ratio }};
  }
</style>
{{ 'component-product-form.css' | asset_url | stylesheet_tag }}
<style type="text/css">
  .quickView .productView-thumbnail .productView-thumbnail-link:after{padding-bottom: {{ portrait_aspect_ratio }}}
  {% if settings.button_hover_style == '2' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);;
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-action .button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-action .button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-action .button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--atc-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-action .button:hover {
      color: var(--atc-color-hover);
      border-color: var(--atc-border-color-hover);
    }
    .productView-action .button:hover svg {
      fill: var(--atc-color-hover);
    }
    .productView-action .button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-action .button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-action .button:hover {
        color: var(--atc-color-hover);
        background: var(--atc-bg-color-hover);
        border-color: var(--atc-border-color-hover);
    }
  {% endif %}
  {% if settings.button_hover_style == '2' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      width: unset;
      height: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      right: 100%;
      z-index: -1;
      transition: all 400ms ease;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      right: 0%;
    }
  {% elsif settings.button_hover_style == '3' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '4' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 0;
      left: -70%;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(25px 0%, 100% 0%, 100% 100%, 0% 100%);
      width: 70%;
      height: 100%;
      transform: rotateY(180deg);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 0;
      right: -70%;
      transform: unset;
      display: unset;
      border: unset;
      border-radius: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      clip-path: polygon(0px 0%, 100% 0%, 100% 100%, 25px 100%);
      width: 70%;
      height: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      left: calc(0% - 2px);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      right: calc(0% - 2px);
    }
  {% elsif settings.button_hover_style == '5' %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button {
      position: relative;
      overflow: hidden;
      z-index: 0;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:before {
      content: "";
      position: absolute;
      top: 50%;
      left: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:after {
      content: "";
      position: absolute;
      top: 50%;
      right: -30px;
      display: unset;
      border: unset;
      animation: unset;
      opacity: unset;
      visibility: unset;
      background: var(--bin-bg-color-hover);
      z-index: -1;
      transition: all 400ms ease;
      width: 20px;
      height: 20px;
      transform: translateY(-50%);
      border-radius: 100%;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
      color: var(--bin-color-hover);
      border-color: var(--bin-border-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover svg {
      fill: var(--bin-color-hover);
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:before {
      -webkit-animation: criss-cross-left 0.8s both;
      animation: criss-cross-left 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover:after {
      -webkit-animation: criss-cross-right 0.8s both;
      animation: criss-cross-right 0.8s both;
      -webkit-animation-direction: alternate;
      animation-direction: alternate;
    }
    @-webkit-keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }

    @keyframes criss-cross-left {
      0% {
        left: -30px;
      }
      50% {
        left: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        left: 40%;
        width: 375px;
        height: 375px;
      }
    }
    @-webkit-keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
    @keyframes criss-cross-right {
      0% {
        right: -30px;
      }
      50% {
        right: calc(50% - 10px);
        width: 20px;
        height: 20px;
      }
      100% {
        right: calc(50% - 10px);
        width: 375px;
        height: 375px;
      }
    }
  {% else %}
    .productView-payment .shopify-payment-button .shopify-payment-button__button:hover {
        color: var(--bin-color-hover);
        background: var(--bin-bg-color-hover);
        border-color: var(--bin-border-color-hover);
        box-shadow: unset;
    }
  {% endif %}
</style>
{{ 'scoder-quick-view.css' | asset_url | stylesheet_tag }}

{%- if variantCount > 0 and product.has_only_default_variant != true -%}
  <script>
    window.quick_view_inven_array_{{ product.id }} = {
        {% for variant in product.variants %}
            '{{ variant.id }}': '{{ variant.inventory_quantity }}',
        {% endfor %}
    };
  </script>
{%- endif -%}
<script>
    window.quick_view_subtotal = {
        show: {{ show_subtotal }},
        text: `{{ 'products.product.sub_total' | t : value : '[value]' }}`
    };
    window.quick_view_selling_array_{{ product.id }} = {
      {% for variant in product.variants %}
          '{{ variant.id }}': '{{ variant.inventory_policy }}',
      {% endfor %}
   };
</script>

<div
  class="productView quickView scoder-quickView layout-{{ layout }}{% if product.media.size == 0 %} productView-no-media{% endif %}"
  data-product-quickview-handle="{{ product.handle }}"
>
  <div class="productView-top">
    <div class="detalle-producto-left">
      <div class="image-producto">
        {%- for media in product.media limit: 1 -%}
          {%- case media.media_type -%}
            {%- when 'image' -%}
              {% comment %} style="width: 100% !important; height: 100% !important; object-fit: contain !important; display: block !important; margin: auto !important;" {% endcomment %}
              <img
                style="width: 100% !important; height: 100% !important; object-fit: contain !important; display: block !important; margin: auto !important;"
                id="image-producto-original product-featured-image-{{ media.id }}"
                {% render 'lazyload', preview_img: media.preview_image, class: true %}
                title="{{ media.preview_image.alt | escape }}"
                data-main-image
              >
          {%- endcase -%}
        {%- endfor -%}
      </div>
      <div class="informacion-producto-opciones">
        {% comment %} READ : DETALLE DE PRODUCTO INICIO {% endcomment %}
        <div class="detalle-producto">
          <h2
            class="productView-title"
            style="--color-title: {{ color_title }};--fontsize-text: {{ fontsize_text | append: 'px' }}"
          >
            <a href="{{ product.url }}">{{ product.title | escape }}</a>
          </h2>
          {%- if show_quick_view_review or show_quick_view_sold_in -%}
            <div
              class="productView-meta clearfix"
              style="--color_short_desc: {{ color_short_desc }}; --fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
            >
              {%- if show_quick_view_review -%}
                <div class="productView-rating scoder-productReview">
                  <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_sold_in -%}
                <div
                  class="productView-soldProduct"
                  data-sold-out-product
                  data-item="{{ quick_view_sold_in_number }}"
                  data-hours="{{ quick_view_sold_in_hours }}"
                  style="display: none;"
                >
                  {% render 'icon-fire-2' %}
                  <span class="text"
                    ><span data-sold-out-number>2</span> {{ 'products.product.sold_in_last.text_1' | t }}
                    <span data-sold-out-hours>8</span> {{ 'products.product.sold_in_last.text_2' | t -}}
                  </span>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}

          {%- if show_quick_view_short_description -%}
            {%- liquid
              assign desc = product.description
            -%}
            {%- if product.metafields.c_f.short_description -%}
              {%- liquid
                assign desc = product.metafields.c_f.short_description
              -%}
            {%- endif -%}
            {%- if desc != blank -%}
              <div
                class="productView-desc scoder-text-format"
                style="--color_short_desc: {{ color_short_desc }};--fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
              >
                {{ desc }}
              </div>
            {%- endif -%}
          {%- endif -%}
          {%- if show_quick_view_vendor
            or show_quick_view_availability
            or show_quick_view_sku
            or show_quick_view_product_type
          -%}
            <div class="productView-info">
              {%- if show_quick_view_sku -%}
                <div
                  class="productView-info-item"
                  data-sku
                  {% unless current_variant.sku != blank %}
                    style="display: none;"
                  {% endunless %}
                >
                  <span class="productView-info-name">{{ 'products.product.text.sku' | t }}</span>
                  <span class="productView-info-value">{{ current_variant.sku }}</span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_vendor -%}
                <div class="productView-info-item">
                  <span class="productView-info-name">{{ 'products.product.text.vendor' | t }}</span>
                  <span class="productView-info-value">{{ product.vendor | link_to_vendor }}</span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_availability -%}
                <div class="productView-info-item" data-inventory data-stock-level="{{ stock_level_display }}">
                  <span class="productView-info-name">{{ 'products.product.text.availability' | t }}</span>
                  <span class="productView-info-value">
                    {%- if current_variant.inventory_management -%}
                      {%- assign first_inventory = current_variant.inventory_quantity -%}
                      {%- if first_inventory > 0 -%}
                        {% if stock_level_display == 'show' %}{{ first_inventory }} {% endif %}
                        {{ 'products.product.in_stock' | t }}
                      {%- else -%}
                        {{ 'products.product.out_of_stock' | t }}
                      {%- endif -%}
                    {%- else -%}
                      {{ 'products.product.many_in_stock' | t }}
                    {%- endif -%}
                  </span>
                </div>
              {%- endif -%}
              {%- if show_quick_view_product_type -%}
                <div class="productView-info-item">
                  <span class="productView-info-name">{{ 'products.product.text.type' | t }}</span>
                  <span class="productView-info-value">{{ product.type | escape }}</span>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}
          <div
            class="productView-price no-js-hidden clearfix"
            id="product-quick-view-price-{{ product.id }}"
            style="--fontsize-text: {{ fontsize_price | append: 'px' }};"
          >
            {%- render 'price', product: product, use_variant: true, price_class: 'price--medium' -%}
          </div>
          {% comment %}
            <h2
              class="productView-title"
              style="--color-title: {{ color_title }};--fontsize-text: {{ fontsize_text | append: 'px' }}"
            >
              <a href="{{ product.url }}">{{ product.title | escape }}</a>
            </h2>
            {%- if show_quick_view_short_description -%}
              {%- liquid
                assign desc = product.description
              -%}
              {%- if desc != blank -%}
                <div
                  class="productView-desc scoder-text-format"
                  style="--color_short_desc: {{ color_short_desc }};--fontsize_short_desc: {{ fontsize_short_desc | append: 'px' }}"
                >
                  {{ desc | truncatewords: word_number_short_desc }}
                </div>
              {%- endif -%}
            {%- endif -%}
            <div
              class="productView-price no-js-hidden clearfix"
              id="product-quick-view-price-{{ product.id }}"
              style="--fontsize-text: {{ fontsize_price | append: 'px' }};"
            >
              {%- render 'price', product: product, use_variant: true, price_class: 'price--medium' -%}
            </div>
          {% endcomment %}
          {%- if show_quick_view_qty -%}
            <div
              class="quantity_selector productView-groupTop"
              style="
                display: flex !important;
                flex-direction: row !important;
                flex-wrap: wrap !important;
                align-items: end !important;
              "
            >
              <quantity-quick-view-input class="productView-quantity quantity__group quantity__group--2 quantity__style--1 clearfix">
                <label class="form-label quantity__label" for="quantity-{{ product.id }}-2">
                  {{- 'products.product.quantity.label__2' | t -}}
                </label>
                <div class="quantity__container">
                  <button type="button" name="minus" class="minus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
                    </span>
                  </button>
                  <input
                    class="form-input quantity__input quantity"
                    type="number"
                    name="quantity"
                    min="1"
                    value="1"
                    inputmode="numeric"
                    pattern="[0-9]*"
                    id="quantity-{{ product.id }}-2"
                    data-product="{{ product.id }}"
                    data-price="{{ current_variant.price }}"
                    data-inventory-quantity="{{ current_variant.inventory_quantity }}"
                  >
                  <button type="button" name="plus" class="plus btn-quantity">
                    <span class="visually-hidden">
                      {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
                    </span>
                  </button>
                </div>
              </quantity-quick-view-input>
              {%- if settings.show_wishlist -%}
                <div class="productView-wishlist clearfix">
                  <a
                    data-wishlist
                    href="#"
                    data-wishlist-handle="{{ product.handle }}"
                    data-product-id="{{ product.id }}"
                    ><span class="visually-hidden">{{ 'wishlist.general.add' | t }}</span> {% render 'icon-heart' -%}
                  </a>
                </div>
              {%- endif -%}
              {%- if show_quick_view_share -%}
                {% render 'scoder-share', product: product, share_layout: '2' %}
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
        {% comment %} READ : DETALLE DE PRODUCTO FIN {% endcomment %}
      </div>
    </div>
    <div class="detalle-producto-right">
      <div class="opciontes-seleccion-cliente">
        <h2 class="productView-title">PERSONALIZAR EL ÍTEM</h2>
        <div class="productView-product">
          <div class="sector-general-opciones-producto"></div>
        </div>
      </div>
      <div
        style="height: 10.3% !important;width: 100% !important;background-color: #2196F3 !important;"
        class="acciones-cliente"
      >
        <div class="productView-options">
          {%- assign product_form_installment_id = 'product-quick-view-form-installment-' | append: product.id -%}
          {%- form 'product', product, id: product_form_installment_id, class: 'installment caption-large' -%}
            <input type="hidden" name="id" value="{{ current_variant.id }}">
            {{ form | payment_terms }}
          {%- endform -%}
          <div
            class="productView-variants scoder-productOptions"
            id="product-quick-view-option-{{ product.id }}"
            data-type="{{ quick_view_picker_type }}"
          >
            {%- if variantCount > 0 and product.has_only_default_variant != true -%}
              {%- if quick_view_picker_type == 'button' -%}
                {%- assign product_swatch_option = settings.swatch | downcase -%}
                <variant-quick-view-radios
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    {%- liquid
                      assign is_swatch = false
                      assign option_name = option.name | downcase
                      if product_swatch_option contains option_name
                        assign is_swatch = true
                      endif
                      assign swatch_type = settings.swatch_type
                      assign option_index = forloop.index0
                    -%}
                    <fieldset
                      class="js product-form__input{% if is_swatch %} product-form__swatch{% endif %} clearfix"
                      data-product-attribute="set-rectangle"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <legend class="form__label">
                        {{ option.name | append: ':' }}
                        <span data-header-option>
                          {{ option.selected_value }}
                        </span>
                      </legend>
                      {%- assign values = '' -%}
                      {%- liquid
                        assign variants_available_arr = product.variants | map: 'available'
                        assign variants_option1_arr = product.variants | map: 'option1'
                        assign variants_option2_arr = product.variants | map: 'option2'
                        assign variants_option3_arr = product.variants | map: 'option3'
                      -%}
                      {%- for variant in product.variants -%}
                        {%- assign value = variant.options[option_index] -%}
                        {%- unless values contains value -%}
                          {%- liquid
                            assign values = values | join: ';'
                            assign values = values | append: ';' | append: value
                            assign values = values | split: ';'
                            assign option_stock = 'soldout'

                            for option1_name in variants_option1_arr
                              case option.position
                                when 1
                                  if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 2
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                                when 3
                                  if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                                    assign option_stock = 'available'
                                  endif
                              endcase
                            endfor
                          -%}
                          <input
                            class="product-form__radio"
                            type="radio"
                            id="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            name="{{ option.name }}"
                            value="{{ value | escape }}"
                            {% if option.selected_value == value %}
                              checked
                            {% endif -%}
                            {% if settings.show_quick_view_variant_image_group %}
                              data-filter=".filter-{{ value | handle }}"
                            {% endif %}
                          >
                          {%- if is_swatch -%}
                            {%- liquid
                              assign enable_variant_image = false
                              case swatch_type
                                when 'variant_image'
                                  assign background_image = variant.image.src | product_img_url: '40x'
                                  if variant.image
                                    assign enable_variant_image = true
                                  endif
                                when 'color'
                                  assign background_image = value | handle | append: '.png' | file_url
                                  assign enable_variant_image = true
                                when 'metafields'
                                  assign variant_color = variant.metafields.custom.variant_color
                                  assign color_codes = false

                                  if variant_color
                                    assign enable_variant_image = true

                                    if variant_color contains '#' or variant_color contains 'rgb' or variant_color contains 'hsl'
                                      assign color_codes = true
                                      assign background_color = variant_color
                                    else
                                      assign background_image = variant_color | append: '.png' | file_url
                                    endif
                                  elsif variant.image
                                    assign enable_variant_image = true
                                    assign background_image = variant.image.src | product_img_url: '40x'
                                  endif
                              endcase
                            -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                            >
                              <span
                                class="pattern"
                                style="background-color: {{ value | split: ' ' | last | handle }};{% if enable_variant_image %}{% if swatch_type == 'metafields' %}{% if color_codes %} background: {{ background_color }}{% else %} background: url({{ background_image }}); background-size: cover;{% endif %}{% else %} background-image: url({{ background_image }});{% endif %}{% endif %}"
                              ></span>
                            </label>
                          {%- else -%}
                            <label
                              class="product-form__label {{ option_stock }}"
                              for="option-quick-view-{{ product.id }}-{{ option.name }}-{{ forloop.index0 }}"
                              ><span class="text">{{ value }}</span></label
                            >
                          {%- endif -%}
                        {%- endunless -%}
                      {%- endfor -%}
                    </fieldset>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-radios>
              {%- else -%}
                <variant-quick-view-selects
                  class="no-js-hidden product-option has-default"
                  data-product="{{ product.id }}"
                  data-url="{{ product.url }}"
                  data-json="{{ product.variants | json | escape }}"
                >
                  {%- for option in product.options_with_values -%}
                    <div
                      class="product-form__input product-form__input--dropdown"
                      data-product-attribute="set-select"
                      data-option-index="{{ forloop.index0 }}"
                    >
                      <label class="form__label" for="option-quick-view-{{ forloop.index0 }}">
                        {{- option.name | append: ':' }}
                        <span data-header-option>{{ option.selected_value }}</span></label
                      >
                      <div class="form__select select">
                        <select
                          id="option-quick-view-{{ forloop.index0 }}"
                          class="select__select"
                          name="options[{{ option.name | escape }}]"
                        >
                          {%- for value in option.values -%}
                            <option
                              value="{{ value | escape }}"
                              {% if option.selected_value == value %}
                                selected="selected"
                              {% endif %}
                            >
                              {{ value }}
                            </option>
                          {%- endfor -%}
                        </select>
                      </div>
                    </div>
                  {%- endfor -%}
                  <script type="application/json">
                    {{ product.variants | json }}
                  </script>
                </variant-quick-view-selects>
              {%- endif -%}
              {%- if show_hot_stock -%}
                <div class="productView-hotStock" data-hot-stock="{{ productMaxStock }}">
                  {%- if current_variant.inventory_management -%}
                    {%- if current_variant.inventory_quantity > 0
                      and current_variant.inventory_quantity <= productMaxStock
                    -%}
                      {{ 'products.product.hot_stock' | t: inventory: current_variant.inventory_quantity }}
                    {%- endif -%}
                  {%- endif -%}
                </div>
              {%- endif -%}
            {%- endif -%}
          </div>
          <noscript>
            <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
              <label class="form__label" for="Variants-{{ section.id }}">
                {{- 'products.product.product_variants' | t -}}
              </label>
              <div class="select">
                <select name="id" id="Variants-{{ section.id }}" class="select__select" form="product-form">
                  {%- for variant in product.variants -%}
                    <option
                      {% if variant == product.selected_or_first_available_variant %}
                        selected="selected"
                      {% endif %}
                      {% if variant.available == false %}
                        disabled
                      {% endif %}
                      value="{{ variant.id }}"
                    >
                      {{ variant.title }}
                      {%- if variant.available == false %} - {{ 'products.product.sold_out' | t }}{% endif %}
                      - {{ variant.price | money | strip_html }}
                    </option>
                  {%- endfor -%}
                </select>
              </div>
            </div>
          </noscript>
          {%- assign product_form_id = 'product-quick-view-form-' | append: product.id -%}
          {%- form 'product',
            product,
            id: product_form_id,
            class: 'form productView-action',
            novalidate: 'novalidate',
            data-type: 'add-to-cart-form'
          -%}
            {% comment %} <div class="productView-message" style="display: none;"></div> {% endcomment %}
            <div
              class="productView-group"
              style="
                display: flex !important;
                flex-direction: row !important;
                gap : 1% !important;
              "
            >
              <div
                class="productView-groupTop"
              >
                <div
                  class="productView-action{% unless settings.show_wishlist %} productView-action-2{% endunless %}"
                  style="--atc-color: #ffffff;--atc-bg-color: #232323;--atc-border-color: #232323;--atc-color-hover: #232323;--atc-bg-color-hover: #ffffff;--atc-border-color-hover: #232323"
                >
                  <input type="hidden" name="id" value="{{ current_variant.id }}">
                  <div class="product-form__buttons">
                    {%- if current_variant.available -%}
                      {%- if current_variant.inventory_management -%}
                        {%- assign first_inventory = current_variant.inventory_quantity -%}
                        {%- liquid
                          if current_variant.available and first_inventory == 0
                            assign allowOutStockSale = true
                          else
                            assign allowOutStockSale = false
                          endif
                        -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          data-available="{{ allowOutStockSale }}"
                          class="product-form__submit button button--primary{% if first_inventory == 0 %} button-text-change{% else %}{% if show_subtotal_text %} button-text-change{% endif %}{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if first_inventory > 0 -%}
                            {%- if show_subtotal_text and subtotal_style == '2' -%}
                              {%- assign subtotal = subtotal | strip_html -%}
                              {{ 'products.product.sub_total' | t: value: subtotal }}
                            {%- else -%}
                              {{ 'products.product.add_to_cart' | t }}
                            {%- endif -%}
                          {%- else -%}
                            {{ 'products.product.pre_order' | t }}
                          {%- endif -%}
                        </button>
                      {%- else -%}
                        <button
                          type="submit"
                          name="add"
                          data-btn-addToCart
                          class="product-form__submit button button--secondary{% if show_subtotal_text %} button-text-change{% endif %}"
                          id="product-add-to-cart"
                        >
                          {%- if show_subtotal_text and subtotal_style == '2' -%}
                            {%- assign subtotal = subtotal | strip_html -%}
                            {{ 'products.product.sub_total' | t: value: subtotal }}
                          {%- else -%}
                            {{ 'products.product.add_to_cart' | t }}
                          {%- endif -%}
                        </button>
                      {%- endif -%}
                    {%- else -%}
                      <button
                        type="submit"
                        name="add"
                        data-btn-addToCart

                        class="product-form__submit button"
                        id="product-add-to-cart"
                        disabled
                      >
                        {{ 'products.product.sold_out' | t }}
                      </button>
                    {%- endif -%}
                  </div>
                </div>
              </div>
              {%- if show_dynamic_checkout -%}
                <div class="productView-groupBottom">
                  <div class="productView-groupItem">
                    <div
                      class="productView-payment"
                      id="product-checkout-{{ product.id }}"
                      style="--bin-color: #232323;--bin-bg-color: #ffffff;--bin-border-color: #acacac;--bin-color-hover: #ffffff;--bin-bg-color-hover: #232323;--bin-border-color-hover: #232323"
                    >
                      {{ form | payment_button }}
                    </div>
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endform -%}
          {%- if show_quick_view_customer_viewing or show_quick_view_trust_image -%}
            <div class="productView-more">
              {%- if show_quick_view_customer_viewing -%}
                <div class="productView-moreItem">
                  <div
                    class="productView-ViewingProduct"
                    data-customer-view="{{ quick_view_customer_viewing_number }}"
                    data-customer-view-time="{{ quick_view_customer_viewing_time }}"
                  >
                    {% render 'icon-eyes-2' %}
                    <span class="text">{{ 'customer_viewing.general.text' | t: number: '10' }}</span>
                  </div>
                </div>
              {%- endif -%}
              {%- if show_quick_view_trust_image -%}
                <div class="productView-moreItem">
                  <div class="productView-securityImage">
                    {%- render 'scoder-trust-image', type: 'product' -%}
                  </div>
                </div>
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
      </div>
    </div>
  </div>
</div>
{%- if show_size_chart and has_size_chart -%}
  {% render 'scoder-size-chart-popup',
    product: product,
    size_chart_type: size_chart_type,
    size_chart_image: size_chart_image
  %}
{%- endif -%}
{%- if show_compare_color and isColor -%}
  {% render 'scoder-compare-color-popup',
    product: product,
    show_compare_color_drop_drap: show_compare_color_drop_drap,
    index: index
  %}
{%- endif -%}
<script>
  // Obtener de las colecciones de los productos una [handle1,handle2,.....,handleN]
  function coleccionesOfProduct() {
    const collections = {{ product.collections | json }};
    return collections
        .filter(collection => {
            const title = collection.title;
            const openIndex = title.indexOf('(');
            const closeIndex = title.indexOf(')');
            return openIndex !== -1 && closeIndex !== -1 && openIndex < closeIndex;
        })
        .map(({ handle }) => handle);
  }

  // Creacion del Query para la consulta 
  function createQuery(){
    let query = '{\n';

    coleccionesOfProduct().forEach((handle, index) => {
        query += `  coleccion${index + 1}: collectionByHandle(handle: "${handle}") {
            title
            description
            products(first: 250) {
                edges {
                    node {
                        id
                        title
                        description
                        tags
                        priceRange {
                            minVariantPrice {
                                amount
                                currencyCode
                            }
                        }
                        collections(first: 250) {
                            edges {
                                node {
                                    title
                                    description
                                }
                            }
                        }
                    }
                }
            }
        }\n`; 
    });

    query += '}';
    return query;
  }

  // Funcion de solicitud a la base de datos de shopify
  async function fetchShopifyData() {
     // Token Acceso APP ADMIN API
    const myTest = 'shpat_' + '45f4a7476152f4881d058f87ce063698';

    try {
        const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Access-Token': myTest
            },
            body: JSON.stringify({
                query: createQuery(),
                variables: {}
            })
        });
        
        const data = await response.json();
        {% comment %} console.log('Respuesta:', data); {% endcomment %}
        return data; // Añadimos el return aquí
    } catch (error) {
        console.error('Error:', error);
        return null; // También es buena práctica retornar algo en caso de error
    }
  }

  // Función para limpiar el body_html en este caso es descripcion y obtener solo el texto
  function limpiarBodyHtml(html) {
    if (!html) return '';
    return html.replace(/<\/?p>/g, '').trim();
  }

  // Funcion para extrae el Nivel 
  function obtenerNivel(text) {
    if(!text) return -1;  // Si no hay texto, devuelve -1
    
    // Busca "Nivel: X" donde X es número
    const nivelMatch = text.match(/Nivel\s*:\s*(\d+)/);  
    
    // Devuelve el número o -1 si no encuentra
    return nivelMatch ? parseInt(nivelMatch[1]) : -1;
    
    // Resultado :
    // obtenerNivel("Nivel: 5")  // → 5
    // obtenerNivel("")         // → -1
  }

  // Función para extraer variables de la descripción
  function extraerVariablesDescripcion(descripcion) {
    const variables = {};
    
    // Eliminar todos los <br> de la descripción
    const descripcionLimpia = descripcion.replace(/<br>/gi, '');
    
    // Dividir la descripción por guiones
    const partes = descripcionLimpia.split('-').map(parte => parte.trim());
    
    // Procesar cada parte
    partes.forEach(parte => {
      // Dividir por los dos puntos
      const [clave, valor] = parte.split(':').map(item => item.trim());
      
      // Convertir la clave a camelCase y limpiar
      const claveNormalizada = clave.toLowerCase()
        .replace('tiposelect', 'tipoSelect'); // Manejar caso especial
      
      // Almacenar en el objeto, ignorando "Nivel"
      if (claveNormalizada !== 'nivel') {
        variables[claveNormalizada] = valor;
      }
    });
    
    return variables;
  }

  // Funcion para la creacion de un producto 
  function createProductObject(node) {
    return {
        id: node.id,
        title: node.title,
        description: node.description,
        tags : node.tags,
        price: {
            amount: node.priceRange.minVariantPrice.amount / 100,
            currencyCode: node.priceRange.minVariantPrice.currencyCode
        }
    };
  }

  // Funcion para verificar colecciones
  function verificarColecciones(colecciones,titulosRequeridos){
    return Array.from(titulosRequeridos).every(titulo => colecciones.has(titulo));
  }

  function parseProductDescription(description) {
    try {
      // Si la descripción está vacía o no es un string, retornar un array vacío
      if (!description || typeof description !== 'string') {
        return [];
      }
  
      // Intentar parsear el string JSON
      const parsed = JSON.parse(description);
      
      // Validar que el resultado sea un array
      if (!Array.isArray(parsed)) {
        return [];
      }
  
      // Validar y limpiar cada objeto en el array
      return parsed.map(item => {
        // Asegurar que todos los campos requeridos existan
        return {
          Nivel: Number(item.Nivel) || 0,
          Titulo: String(item.Titulo || ''),
          Min: Number(item.Min) || 0,
          Max: Number(item.Max) || 0,
          TipoSelect: String(item.TipoSelect || ''),
          items: Array.isArray(item.items) ? item.items : 
                 // Si items es un número largo, convertirlo a array de números
                 String(item.items).split(',').map(num => Number(num.trim())).filter(num => !isNaN(num))
        };
      }).filter(item => 
        // Filtrar objetos inválidos
        item.Nivel > 0 && 
        item.Titulo && 
        item.TipoSelect && 
        Array.isArray(item.items) && 
        item.items.length > 0
      );
    } catch (error) {
      console.error('Error parsing product description:', error);
      return [];
    }
  }
  

  /**
  * Esta función procesa y organiza datos de una tienda Shopify:
  * 1. Clasifica las colecciones existentes en tres niveles (2, 3 y 4)
  * 2. Obtiene todos los productos de la tienda usando GraphQL
  * 3. Extrae y organiza la información de cada producto incluyendo:
  *    - Información básica (id, título, descripción)
  *    - Precios
  *    - Colecciones asociadas
  * 4. Evita duplicados de productos
  * 5. Muestra los resultados organizados en consola
  */
  async function testPrueba() {
    // Arrays para mantener la lógica original
    const coleccionNivel2 = [];
    const coleccionNivel4 = [];
    const coleccionNivel3 = [];
    const productosNivel2y3 = [];
    const productosNivel4 = [];
  
    // Set para verificación rápida de IDs duplicados
    const idsNivel2y3 = new Set();
    const idsNivel2y4 = new Set();
  
    // Validación de paréntesis
    const tieneParentesisValidos = (titulo) => {
      return titulo.includes('(') && titulo.includes(')') && 
             titulo.indexOf('(') < titulo.indexOf(')');
    };
  
    // Procesar colecciones existentes de manera más eficiente
    const collections = {{ product.collections | json }};
    
    for (const collection of collections) {
      const handle = collection.handle;
      const title = collection.title;
      const description = limpiarBodyHtml(collection.body_html);
      const nivel = obtenerNivel(description);
      
      // Solo agregar colecciones con paréntesis válidos
      if (!tieneParentesisValidos(title)) continue;
      
      if (nivel === 2) {
        coleccionNivel2.push({ handle, title, description });
      } else if (nivel === 4) {
        coleccionNivel4.push({ handle, title, description });
      } else if (nivel === 3) {
        coleccionNivel3.push({ handle, title, description });
      }
    }
  
    /**
    * Almacenamiento en memoria (cache) de los títulos de colecciones usando Set
    * - Evita búsquedas repetitivas en la colección original
    * - Garantiza valores únicos mediante Set
    * - Mejora el rendimiento con acceso O(1) para búsquedas
    */
    const titulosNivel2 = new Set(coleccionNivel2.map(col => col.title));
    const titulosNivel3 = new Set(coleccionNivel3.map(col => col.title));
    const titulosNivel4 = new Set(coleccionNivel4.map(col => col.title));
  
    // Obtener datos de Shopify
    const respuesta = await fetchShopifyData();
    
    if (respuesta?.data) {
      // Procesar todos los productos de una vez
      const productosProcessados = Object.values(respuesta.data)
      // Aplanar y filtrar productos válidos
      .flatMap(coleccion => coleccion?.products?.edges || [])
      .filter(edge => edge?.node)
      .map(edge => {
        const node = edge.node;

        // Obtener y validar colecciones
        const todasColecciones = node.collections.edges.map(colEdge => ({
          title: colEdge.node.title,
          description: colEdge.node.description
        }));

        // Validación rápida de paréntesis
        if (!todasColecciones.every(col => tieneParentesisValidos(col.title))) {
          return null;
        }

        // Crear Set de títulos una sola vez
        const titulosProducto = new Set(todasColecciones.map(col => col.title));

        // Validar nivel 2 (requerido)
        if (!verificarColecciones(titulosProducto, titulosNivel2)) {
          return null;
        }

        // Crear el objeto producto
        const producto = {
          ...createProductObject(node),
          collections: todasColecciones
        };

        return {
          producto,
          titulosProducto
        };
      })
      .filter(Boolean); 
      // Eliminar productos que no cumplen los requisitos básicos

      // Procesar y clasificar productos
      const productosPorNivel = productosProcessados.reduce((acc, { producto, titulosProducto }) => {
        // Verificar nivel 2 y 3
        if (verificarColecciones(titulosProducto, titulosNivel3)) {
            if (!idsNivel2y3.has(producto.id)) {
                acc.nivel2y3.push(producto);
                idsNivel2y3.add(producto.id);
            }
        }
        // Verificar solo nivel 4
        else if (titulosProducto.some(titulo => titulosNivel4.has(titulo))) {
            if (!idsNivel2y4.has(producto.id)) {
                acc.nivel2y4.push(producto);
                idsNivel2y4.add(producto.id);
            }
        }
        return acc;
      }, { nivel2y3: [], nivel2y4: [] });
      {% comment %} const productosPorNivel = productosProcessados.reduce((acc, { producto, titulosProducto }) => {
        // Verificar nivel 2 y 3
        if (verificarColecciones(titulosProducto, titulosNivel3)) {
          if (!idsNivel2y3.has(producto.id)) {
            acc.nivel2y3.push(producto);
            idsNivel2y3.add(producto.id);
          }
        }
        // Verificar nivel 2 y 4 solo si no cumplió nivel 3
        else if (Array.from(titulosNivel4).some(titulo => titulosProducto.has(titulo))) {
          if (!idsNivel2y4.has(producto.id)) {
            acc.nivel2y4.push(producto);
            idsNivel2y4.add(producto.id);
          }
        }
          return acc;
        }, { nivel2y3: [], nivel2y4: [] }); {% endcomment %}

        // Ordenar por precio y asignar a los arrays finales
        productosNivel2y3.push(
          ...productosPorNivel.nivel2y3.sort((a, b) => a.price.amount - b.price.amount)
        );
        
        productosNivel4.push(
          ...productosPorNivel.nivel2y4.sort((a, b) => a.price.amount - b.price.amount)
        );
    }

    const contendorPrincipal = document.querySelector('.sector-general-opciones-producto');
    coleccionNivel3.forEach((coleccion, indexCN3) => {

      const variables = extraerVariablesDescripcion(coleccion.description);
        
      const {variante,limite,solicitud,tipoSelect} = variables;
        
      const textoSeleccion = 
          solicitud == 'Opcional'
          ? limite == 1
            ? 'Selecciona hasta un artículo'
            : `Selecciona hasta ${limite} artículos`
          : limite == 1
          ? 'Selecciona un artículo'
          : `Selecciona exactamente ${limite} artículos`;

      const colorSolicitud = solicitud == 'Opcional' ? 'style="color: #B5B6BD !important;"' : '';
      let menuItemProducto = `<div class="menu-item-producto" id="menu-item-${indexCN3}">`;

        let contenidooHTML = `
        <div class="titulo-detalle-oferta-producto">
          <div id="titulo-detalle__comp1">
            <h2 class="titulo-base1">ELIGE ${variante.toUpperCase()}</h2>
            <span class="titulo-base2">${textoSeleccion}</span>
          </div>
          <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${solicitud.toUpperCase()}</span>
        </div>
        <div class="item-menuItem" id="menuItem-${indexCN3}" data-limite="${limite}">
        `;

      let subItemProducto =  ``;

      // Filtrar productos específicos que son de nivel 3 
      const productosEspecificos = productosNivel2y3.filter(producto => {
        return producto.collections.some(col => col.title == coleccion.title);
      });

      productosEspecificos.forEach((productoMainItem, indexMainItem) => {
        // ID del producto se encuentra en los TAGS

        if(tipoSelect === 'radio'){
          contenidooHTML += `
          <div class="opcion-principal-detalle-oferta3">
            <div class="producto-info3">
              <span class="producto-nombre3">${productoMainItem.title}</span>
              ${parseFloat(productoMainItem.price.amount) > 0 ? `<span class="producto-precio3">+Bs${productoMainItem.price.amount}</span>` : ''}
            </div>
            <div class="opcion-nombre1">
              <div class="hover-area1" id="hoverArea-${indexCN3}-${indexMainItem}"></div>
              <input
                type="radio"
                id="item-${indexCN3}-${indexMainItem}"
                name="opcion-grupo-${indexCN3}"
                class="radio-input"
                data-group="${indexCN3}"
                data-limite="${limite}"
                onchange="validarLimiteRadio(this)"
              >
            </div>
          </div>
          `;
        }

        if(tipoSelect === 'numberCount'){
          contenidooHTML += `
            <div class="opcion-principal-detalle-oferta2">
              <div class="producto-info2">
                <span class="producto-nombre2">${productoMainItem.title}</span>
                ${productoMainItem.price.amount > 0 ? `<span class="producto-precio2">+Bs${productoMainItem.price.amount}</span>` : ''}
              </div>
              <div class="controles-cantidad2">
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="decrementCantidad('${indexCN3}-${indexMainItem}', '${indexCN3}')"
                  data-group="${indexCN3}"
                  data-limite="${limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
                <p class="cantidad-display2" id="cantidad-${indexCN3}-${indexMainItem}" data-group="${indexCN3}">0</p>
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="incrementCantidad('${indexCN3}-${indexMainItem}', '${indexCN3}')"
                  data-group="${indexCN3}"
                  data-limite="${limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
              </div>
            </div>
          `;
        }

        if(tipoSelect === 'checkbox'){
          contenidooHTML += `
            <div class="opcion-principal-detalle-oferta3">
              <div class="producto-info3">
                <span class="producto-nombre3">${productoMainItem.title}</span>
                ${parseFloat(productoMainItem.price.amount) > 0 ? `<span class="producto-precio3">+Bs${productoMainItem.price.amount}</span>` : ''}
              </div>
              <div class="control-checkbox3">
                <div class="checkbox-container3">
                  <input
                    type="checkbox"
                    id="item-${indexCN3}-${indexMainItem}"
                    name="properties[${productoMainItem.title}]"
                    class="input-checkbox3"
                    data-group="${indexCN3}"
                    data-limite="${limite}"
                    onchange="validarLimiteCheckbox(this)"
                  >
                </div>
              </div>
            </div>
          `;
        }

        // Sale de la iteración actual si es que la descripcion de producto "productoMainItem" esta vacia
        if (!productoMainItem.description || productoMainItem.description.trim() === '') {
          return;
        }

        // Parsear datos de la descripcion para usar la data de esa informacion 
        const itemsSubSeccionProducto = parseProductDescription(productoMainItem.description);
        if (itemsSubSeccionProducto.length === 0) {
          return;
        }

        itemsSubSeccionProducto.forEach((detalleProducto,indexProducto) => {
          const { Nivel, Titulo, Min, Max, TipoSelect, items } = detalleProducto;

          // Si el Minimo es 1 y Max es (N>0) tons es Requerida 
          // Si el Minimo es 0 y Max es (N>0) tons es Opcional 
          const textoSeleccion = Min === 0 
          ? Max === 1 
              ? 'Selecciona hasta un artículo'
              : `Selecciona hasta ${Max} artículos`
          : Max === 1
              ? 'Selecciona un artículo'
              : `Selecciona exactamente ${Max} artículos`;

          const colorSolicitud = Min === 0 ? 'style="color: #B5B6BD !important;"' : '';          
          subItemProducto = `<div class="menu-item-producto" id="menu-item-${indexProducto} ">`;

          let contenidoHTML = `
            <div class="titulo-detalle-oferta-producto">
              <div id="titulo-detalle__comp1">
                <h2 class="titulo-base1">ELIGE ${Titulo.toUpperCase()}</h2>
                <span class="titulo-base2">${textoSeleccion}</span>
              </div>
              <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${solicitud.toUpperCase()}</span>
            </div>
            <div class="item-menuItem" id="menuItem-${indexProducto}" data-min="${Min}" data-max="${Max}">
            `;

          // IDs de todos los productos de la coleccion actual
          items.forEach((item, indexItem) => {
            console.log(productosNivel4)
            
          });



        });
      

        // Obtener todas las colecciones solamente el titulo del producto actual
        const coleccionesProducto = productoMainItem.collections.map(col => col.title);
        {% comment %} console.log(coleccionesProducto); {% endcomment %}

        if(coleccionesProducto.length > 0){
           subItemProducto += ``;
           let atributosSubItemProducto = ``;

          // Iterar sobre las colecciones del producto actual de trabajo
          coleccionesProducto.forEach((coleccion, indexColeccion) => {
            // Verificar si es colección nivel 4
            const esUnaColeccionNivel4 = coleccionNivel4.some(col => col.title === coleccion);

            // Log para debugging
             {% comment %} console.log(`Verificando colección ${coleccion}:`, 
                esUnaColeccionNivel4 ? 'Es nivel 4' : 'No es nivel 4');  {% endcomment %}

            // Si no es nivel 4 no se trabaja si va al siguiente
            if (!esUnaColeccionNivel4) {
                return;
            }
            
            // Se va poner el id de distincio de la coleccion
            subItemProducto += `<div class="sub-item-producto" id="menu-item-${indexCN3} tipo-producto-${indexMainItem} sub-item-${indexColeccion}">`;

            // Aquí continúa el código para procesar colecciones nivel 4
            {% comment %} console.log(`Procesando colección nivel 4: ${coleccion}`); {% endcomment %}

            // Se va obtener mas detalles completos de la colección
            const detallesCompletoColeccion = coleccionNivel4.find(col => col.title === coleccion);

            // Log para debugging
            {% comment %} console.log('Detalles completos de la colección:', detallesCompletoColeccion); {% endcomment %}

            // Traer la descripcion de la coleccion nivel 4, de "detallesCompletoColeccion" y obtener las variables
            const variablesColeccionNivel4 = extraerVariablesDescripcion(detallesCompletoColeccion.description);

            const {atributo,limite,solicitud,tipoSelect} = variablesColeccionNivel4;
            const textoSeleccion = 
            solicitud == 'Opcional'
            ? limite == 1
              ? 'Selecciona hasta un artículo'
              : `Selecciona hasta ${limite} artículos`
            : limite == 1
            ? 'Selecciona un artículo'
            : `Selecciona exactamente ${limite} artículos`;

            const colorSolicitud = solicitud == 'Opcional' ? 'style="color: #B5B6BD !important;"' : '';
            
            atributosSubItemProducto += `
            <div class="titulo-detalle-oferta-producto">
              <div id="titulo-detalle__comp1">
                <h2 class="titulo-base1">ELIGE ${atributo.toUpperCase()}</h2>
                <span class="titulo-base2">${textoSeleccion}</span>
              </div>
              <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${solicitud.toUpperCase()}</span>
            </div>
            <div class="item-subItem" id="subItem-${indexColeccion}" data-limite="${limite}">
            `;

            // Se va a iterar sobre los productos de nivel 2 y 4 que fueron preseleccionados, para verificar 
            // si algunos de ellos pertenecen a la colección nivel 4 actucal, al que se trabaja
            productosNivel4.forEach((productoNivel2y4, indexProductoNivel2y4) => {

              // Verificar si el producto dentro de sus coleccion se encuentra la coleccion nivel 4 actual de trabajo "coleccion"
              const esProductoDeColeccionNivel4 = productoNivel2y4.collections.some(col => col.title === coleccion);

              // Verificar si el producto es de la colección nivel 4 actual
              if (!esProductoDeColeccionNivel4) {
                return;
              }

              if(tipoSelect === 'radio'){
                atributosSubItemProducto += `
                <div class="opcion-principal-detalle-oferta3">
                  <div class="producto-info3">
                    <span class="producto-nombre3">${productoNivel2y4.title}</span>
                    ${parseFloat(productoNivel2y4.price.amount) > 0 ? `<span class="producto-precio3">+Bs${productoNivel2y4.price.amount}</span>` : ''}
                  </div>
                  <div class="opcion-nombre1">
                    <div class="hover-area1" id="hoverArea-${indexColeccion}-${indexProductoNivel2y4}"></div>
                    <input
                      type="radio"
                      id="item-${indexColeccion}-${indexMainItem}"
                      name="opcion-grupo-${indexColeccion}"
                      class="radio-input"
                      data-group="${indexColeccion}"
                      data-limite="${limite}"
                      onchange="validarLimiteRadio(this)"
                    >
                  </div>
                </div>
                `;
              }
      
              if(tipoSelect === 'numberCount'){
                atributosSubItemProducto += `
                  <div class="opcion-principal-detalle-oferta2">
                    <div class="producto-info2">
                      <span class="producto-nombre2">${productoNivel2y4.title}</span>
                      ${productoNivel2y4.price.amount > 0 ? `<span class="producto-precio2">+Bs${productoNivel2y4.price.amount}</span>` : ''}
                    </div>
                    <div class="controles-cantidad2">
                      <button 
                        type="button" 
                        class="btn-cantidad2" 
                        onclick="decrementCantidad('${indexColeccion}-${indexProductoNivel2y4}', '${indexColeccion}')"
                        data-group="${indexColeccion}"
                        data-limite="${limite}"
                      >
                        <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                          <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                        </svg>
                      </button>
                      <p class="cantidad-display2" id="cantidad-${indexColeccion}-${indexProductoNivel2y4}" data-group="${indexColeccion}">0</p>
                      <button 
                        type="button" 
                        class="btn-cantidad2" 
                        onclick="incrementCantidad('${indexColeccion}-${indexProductoNivel2y4}', '${indexColeccion}')"
                        data-group="${indexColeccion}"
                        data-limite="${limite}"
                      >
                        <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                          <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                `;
              }
      
              if(tipoSelect === 'checkbox'){
                atributosSubItemProducto += `
                  <div class="opcion-principal-detalle-oferta3">
                    <div class="producto-info3">
                      <span class="producto-nombre3">${productoNivel2y4.title}</span>
                      ${parseFloat(productoNivel2y4.price.amount) > 0 ? `<span class="producto-precio3">+Bs${productoNivel2y4.price.amount}</span>` : ''}
                    </div>
                    <div class="control-checkbox3">
                      <div class="checkbox-container3">
                        <input
                          type="checkbox"
                          id="item-${indexColeccion}-${indexProductoNivel2y4}"
                          name="properties[${productoNivel2y4.title}]"
                          class="input-checkbox3"
                          data-group="${indexColeccion}"
                          data-limite="${limite}"
                          onchange="validarLimiteCheckbox(this)"
                        >
                      </div>
                    </div>
                  </div>
                `;
              }
            });

            // Aquí se debe cerrar el subItemProducto div
            atributosSubItemProducto += `</div>`;
            // Aquí se debe añadir el subItemProducto al contenidoSubItemsHTML
            subItemProducto += `${atributosSubItemProducto} </div>`; 
          }); 

          // Cerramos el subItemProducto
          {% comment %} subItemProducto += `${atributosSubItemProducto} </div>`; {% endcomment %}
        }
      });

      contenidooHTML += `</div>`; 
      // Aqui es donde se debe a;adir el subItemProducto abajo de los atributos del menu item esto llegara a ser de la forma
      // menuItemProducto += ` ${contenidooHTML} + ${subItemProducto}</div>`; 
      
      menuItemProducto += ` ${contenidooHTML} ${subItemProducto} </div>`; 
      {% comment %} menuItemProducto.innerHTML = contenidooHTML ; {% endcomment %}
      {% comment %} contendorPrincipal.appendChild(menuItemProducto); {% endcomment %}
      contendorPrincipal.innerHTML += menuItemProducto;
    });

  
    // Imprimir resultados
    console.log('Colecciones Nivel 2:', coleccionNivel2);
    console.log('Colecciones Nivel 3:', coleccionNivel3);
    console.log('Colecciones Nivel 4:', coleccionNivel4);
    console.log('Productos Nivel 2 y 3:', productosNivel2y3);
    console.log('Productos Nivel 2 y 4:', productosNivel4); 
  
    return {
      colecciones: {
        nivel2: coleccionNivel2,
        nivel3: coleccionNivel3,
        nivel4: coleccionNivel4
      },
      productosNivel2y3,
      productosNivel4
    };
  }

  function getMenuItems() {
    const menuItems = [
      {
        id: '1',
        titulo: 'Elige tamaño',
        solicitud: 'Requerido',
        limite: 1,
        typeSelect: 'radio',
        mainItems: [
          {
            id: '1a',
            titulo: 'Personal para 1 persona',
            precio: 0,
            sideItems: [],
          },
          {
            id: '1b',
            titulo: 'Super personal para 2 a 3 personas',
            precio: 18,
            sideItems: [
              {
                id: '1a1',
                titulo: 'Elige Extra',
                solicitud: 'Opcional',
                limite: 9,
                typeSelect: 'numberCount',
                opciones: [
                  {
                    id: '1a1a',
                    titulo: 'Extra Queso',
                    precio: 12,
                  },
                  {
                    id: '1a1b',
                    titulo: 'Extra Pepeeroni',
                    precio: 5,
                  },
                  {
                    id: '1a1c',
                    titulo: 'Extra Choclo',
                    precio: 5,
                  },
                  {
                    id: '1a1d',
                    titulo: 'Extra Tocino',
                    precio: 5,
                  },
                ],
              },
            ],
          },
          {
            id: '1c',
            titulo: 'Mediana para 3 a 4 personas',
            precio: 61,
            sideItems: [
              {
                id: '1c1',
                titulo: 'Elige Masa - Borde',
                solicitud: 'Requerido',
                limite: 1,
                typeSelect: 'radio',
                opciones: [
                  {
                    id: '1c1a',
                    titulo: 'Pan Pizza',
                    precio: 0,
                  },
                  {
                    id: '1c1b',
                    titulo: 'Crispy (delgada y crujiente)',
                    precio: 0,
                  },
                  {
                    id: '1c1c',
                    titulo: 'Pan pizza + borde catupiry',
                    precio: 15,
                  },
                  {
                    id: '1c1d',
                    titulo: 'Pan pizza + border hot chesse',
                    precio: 12,
                  },
                ],
              },
              {
                id: '1c2',
                titulo: 'Elige Extra',
                solicitud: 'Opcional',
                limite: 9,
                typeSelect: 'numberCount',
                opciones: [
                  {
                    id: '1c2a',
                    titulo: 'Extra Queso',
                    precio: 12,
                  },
                  {
                    id: '1c2b',
                    titulo: 'Extra Pepeeroni',
                    precio: 5,
                  },
                  {
                    id: '1c2c',
                    titulo: 'Extra Choclo',
                    precio: 5,
                  },
                  {
                    id: '1c2d',
                    titulo: 'Extra Tocino',
                    precio: 5,
                  },
                ],
              },
            ],
          },
          {
            id: '1d',
            titulo: 'Familiar para 4 a 5 personas',
            precio: 87,
            sideItems: [
              {
                id: '1d1',
                titulo: 'Elige Masa - Borde',
                solicitud: 'Requerido',
                limite: 1,
                typeSelect: 'radio',
                opciones: [
                  {
                    id: '1d1a',
                    titulo: 'Pan Pizza',
                    precio: 0,
                  },
                  {
                    id: '1d1b',
                    titulo: 'Crispy (delgada y crujiente)',
                    precio: 0,
                  },
                  {
                    id: '1d1c',
                    titulo: 'Pan pizza + borde catupiry',
                    precio: 15,
                  },
                  {
                    id: '1d1d',
                    titulo: 'Pan pizza + border hot chesse',
                    precio: 12,
                  },
                ],
              },
              {
                id: '1d2',
                titulo: 'Postres',
                solicitud: 'Opcional',
                limite: 9,
                typeSelect: 'checkbox',
                opciones: [
                  {
                    id: '1d2a',
                    titulo: '3 Leches',
                    precio: 17,
                  },
                  {
                    id: '1d2b',
                    titulo: 'Lemon Hut',
                    precio: 22,
                  },
                  {
                    id: '1d2c',
                    titulo: 'Choco Hut Doblon',
                    precio: 22,
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        id: '2',
        titulo: 'GASEOSAS',
        solicitud: 'Opcional',
        limite: 4,
        typeSelect: 'checkbox',
        mainItems: [
          {
            id: '2a',
            titulo: 'Coca Cola x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '2b',
            titulo: 'Coca Cola sin azucar x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '2c',
            titulo: 'Fanta naranja x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '2d',
            titulo: 'Fanta guarana x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '2e',
            titulo: 'Fanta papaya x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '2f',
            titulo: 'Sprite lima limon x 2lt',
            precio: 22,
            sideItems: [],
          },
        ],
      },
      {
        id: '3',
        titulo: 'Postres',
        solicitud: 'Opcional',
        limite: 2,
        typeSelect: 'checkbox',
        mainItems: [
          {
            id: '3a',
            titulo: 'Mousse de Maracuya',
            precio: 17,
            sideItems: [],
          },
          {
            id: '3b',
            titulo: '10 Unidades Cinammon Sticks',
            precio: 22,
            sideItems: [],
          },
          {
            id: '3c',
            titulo: 'Brownie Chocolate Personal',
            precio: 17,
            sideItems: [],
          },
        ],
      },
      {
        id: '5',
        titulo: 'GASEOSAS',
        solicitud: 'Requerido',
        limite: 4,
        typeSelect: 'checkbox',
        mainItems: [
          {
            id: '5a',
            titulo: 'Coca Cola x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '5b',
            titulo: 'Coca Cola sin azucar x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '5c',
            titulo: 'Fanta naranja x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '5d',
            titulo: 'Fanta guarana x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '5e',
            titulo: 'Fanta papaya x 2lt',
            precio: 22,
            sideItems: [],
          },
          {
            id: '5f',
            titulo: 'Sprite lima limon x 2lt',
            precio: 22,
            sideItems: [],
          },
        ],
      },
      {
        id: '4',
        titulo: 'ELIGE 2DO SABOR',
        solicitud: 'Requerido',
        limite: 3,
        typeSelect: 'numberCount',
        mainItems: [
          {
            id: '4a',
            titulo: 'Pepperoni lovers',
            precio: 0,
            sideItems: [],
          },
          {
            id: '4b',
            titulo: 'Chessy lovers',
            precio: 0,
            sideItems: [],
          },
          {
            id: '4c',
            titulo: 'Veggie lovers',
            precio: 0,
            sideItems: [],
          },
          {
            id: '4d',
            titulo: 'Meat lovers',
            precio: 0,
            sideItems: [],
          },
          {
            id: '4e',
            titulo: 'Hawaian lovers',
            precio: 0,
            sideItems: [],
          },
        ],
      },
    ];
    // ... lógica para llenar menuItems ...
    return menuItems;
  }

  function agregarMenuItems() {
    const contendorPrincipal = document.querySelector('.sector-general-opciones-producto');

    getMenuItems().forEach((item, index) => {
      const textoSeleccion =
        item.solicitud == 'Opcional'
          ? item.limite == 1
            ? 'Selecciona hasta un artículo'
            : `Selecciona hasta ${item.limite} artículos`
          : item.limite == 1
          ? 'Selecciona un artículo'
          : `Selecciona exactamente ${item.limite} artículos`;
      const colorSolicitud = item.solicitud == 'Opcional' ? 'style="color: #B5B6BD !important;"' : '';

      const menuItemProducto = document.createElement('div');
      menuItemProducto.className = 'menu-item-producto';

      let contenidoHTML = `
        <div class="titulo-detalle-oferta-producto">
          <div id="titulo-detalle__comp1">
            <h2 class="titulo-base1">${item.titulo}</h2>
            <span class="titulo-base2">${textoSeleccion}</span>
          </div>
          <span class="titulo-detalle-seleccion text" ${colorSolicitud}>${item.solicitud.toUpperCase()}</span>
        </div>
        <div class="item-menuItem" id="menuItem-${index}" data-limite="${item.limite}">
      `;

      item.mainItems.forEach((mainItem, mainIndex) => {
        if (item.typeSelect == 'radio') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta3">
              <div class="producto-info3">
                <span class="producto-nombre3">${mainItem.titulo}</span>
                ${parseFloat(mainItem.precio) > 0 ? `<span class="producto-precio3">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="opcion-nombre1">
                <div class="hover-area1" id="hoverArea-${index}-${mainIndex}"></div>
                <input
                  type="radio"
                  id="item-${index}-${mainIndex}"
                  name="opcion-grupo-${index}"
                  class="radio-input"
                  data-group="${index}"
                  data-limite="${item.limite}"
                  onchange="validarLimiteRadio(this)"
                >
              </div>
            </div>
          `;
        }

        if (item.typeSelect === 'numberCount') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta2">
              <div class="producto-info2">
                <span class="producto-nombre2">${mainItem.titulo}</span>
                ${mainItem.precio > 0 ? `<span class="producto-precio2">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="controles-cantidad2">
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="decrementCantidad('${index}-${mainIndex}', '${index}')"
                  data-group="${index}"
                  data-limite="${item.limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
                <p class="cantidad-display2" id="cantidad-${index}-${mainIndex}" data-group="${index}">0</p>
                <button 
                  type="button" 
                  class="btn-cantidad2" 
                  onclick="incrementCantidad('${index}-${mainIndex}', '${index}')"
                  data-group="${index}"
                  data-limite="${item.limite}"
                >
                  <svg class="MuiSvgIcon-root2" focusable="false" viewBox="0 0 24 24">
                    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path>
                  </svg>
                </button>
              </div>
            </div>
          `;
        }

        if (item.typeSelect === 'checkbox') {
          contenidoHTML += `
            <div class="opcion-principal-detalle-oferta3">
              <div class="producto-info3">
                <span class="producto-nombre3">${mainItem.titulo}</span>
                ${parseFloat(mainItem.precio) > 0 ? `<span class="producto-precio3">+Bs${mainItem.precio}</span>` : ''}
              </div>
              <div class="control-checkbox3">
                <div class="checkbox-container3">
                  <input
                    type="checkbox"
                    id="item-${index}-${mainIndex}"
                    name="properties[${mainItem.titulo}]"
                    class="input-checkbox3"
                    data-group="${index}"
                    data-limite="${item.limite}"
                    onchange="validarLimiteCheckbox(this)"
                  >
                </div>
              </div>
            </div>
          `;
        }
      });

      contenidoHTML += `</div>`;
      menuItemProducto.innerHTML = contenidoHTML;
      contendorPrincipal.appendChild(menuItemProducto);
    });
  }

  function validarLimiteCheckbox(casilla) {
    // Obtiene el ID del grupo desde el atributo data-group del checkbox
    // Ejemplo: si data-group="2", grupoId será "2"
    const grupoId = casilla.dataset.group;

    // Convierte el límite de string a número
    // Ejemplo: si data-limite="4", limitePermitido será 4
    const limitePermitido = parseInt(casilla.dataset.limite);

    // Encuentra el div contenedor del grupo usando el ID
    // Ejemplo: busca <div id="menuItem-2">
    const contenedorGrupo = document.getElementById(`menuItem-${grupoId}`);

    // Obtiene todos los checkboxes dentro de ese grupo
    // Ejemplo: si hay 6 gaseosas, obtiene esos 6 checkboxes
    const casillasGrupo = contenedorGrupo.querySelectorAll('input[type="checkbox"]');

    // Inicializa contador
    let totalSeleccionados = 0;

    // Cuenta cuántos checkboxes están marcados en ese grupo
    // Ejemplo: si marcaste Coca Cola, Fanta y Sprite, totalSeleccionados será 3
    casillasGrupo.forEach((casilla) => {
      if (casilla.checked) totalSeleccionados++;
    });

    // Si excede el límite, desmarca el último checkbox
    // Ejemplo: si el límite es 4 y intentas marcar un quinto, lo impide
    if (totalSeleccionados > limitePermitido) {
      casilla.checked = false;
    }

    verificarRequeridos();
  }

  function validarLimiteRadio(radioBoton) {
    // Obtiene el ID del grupo desde el atributo data-group del radio
    // Ejemplo: si data-group="1", grupoId será "1" (grupo de tamaños de pizza)
    const grupoId = radioBoton.dataset.group;

    // Convierte el límite de string a número
    // Ejemplo: si data-limite="1", limitePermitido será 1 (solo una opción de tamaño)
    const limitePermitido = parseInt(radioBoton.dataset.limite);

    // Encuentra el contenedor del grupo usando el ID
    // Ejemplo: busca <div id="menuItem-1"> (contenedor de tamaños)
    const contenedorGrupo = document.getElementById(`menuItem-${grupoId}`);

    // Obtiene todos los radio buttons MARCADOS dentro de ese grupo
    // Ejemplo: obtiene todos los radio buttons de tamaño que estén checked
    const radiosBotones = contenedorGrupo.querySelectorAll('input[type="radio"]:checked');

    // Si hay más seleccionados que el límite permitido, desmarca el último
    // Ejemplo: si intentas seleccionar un segundo tamaño cuando el límite es 1
    if (radiosBotones.length > limitePermitido) {
      radioBoton.checked = false;
    }
  }

  function obtenerSumaGrupo(grupo) {
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const displays = contenedorGrupo.querySelectorAll('.cantidad-display2');
    let suma = 0;
    displays.forEach((display) => {
      suma += parseInt(display.textContent || '0');
    });
    return suma;
  }

  function incrementCantidad(id, grupo) {
    const display = document.getElementById(`cantidad-${id}`);
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const limite = parseInt(contenedorGrupo.dataset.limite);
    const sumaActual = obtenerSumaGrupo(grupo);
  
    if (sumaActual < limite) {
      const valorActual = parseInt(display.textContent || '0');
      display.textContent = valorActual + 1;
      // Actualizar estado de todos los botones después de incrementar
      actualizarBotonesNumberCount(grupo);
    }

    verificarRequeridos();
  }
  
  function decrementCantidad(id, grupo) {
    const display = document.getElementById(`cantidad-${id}`);
    const valorActual = parseInt(display.textContent || '0');
    
    if (valorActual > 0) {
      display.textContent = valorActual - 1;
      // Actualizar estado de todos los botones después de decrementar
      actualizarBotonesNumberCount(grupo);
    }
    verificarRequeridos();
  }

  function actualizarBotonesNumberCount(grupo) {
    const contenedorGrupo = document.getElementById(`menuItem-${grupo}`);
    const limite = parseInt(contenedorGrupo.dataset.limite);
    const sumaTotal = obtenerSumaGrupo(grupo);
    
    // Obtener todos los pares de botones y sus displays
    const elementosGrupo = contenedorGrupo.querySelectorAll('.opcion-principal-detalle-oferta2');
    
    elementosGrupo.forEach((elemento, index) => {
      const botonIncremento = elemento.querySelector('button:last-child');
      const botonDecremento = elemento.querySelector('button:first-child');
      const display = elemento.querySelector('.cantidad-display2');
      const cantidad = parseInt(display.textContent || '0');
      
      // Manejar botón de incremento
      if (sumaTotal >= limite) {
        // Si llegamos al límite, deshabilitamos incremento
        botonIncremento.style.fill = 'currentColor';
        botonIncremento.disabled = true;
      } else {
        // Si no llegamos al límite, habilitamos incremento
        botonIncremento.style.fill = '';
        botonIncremento.disabled = false;
      }
      
      // Manejar botón de decremento
      if (cantidad === 0) {
        // Si el valor es 0, deshabilitamos decremento
        botonDecremento.style.fill = 'currentColor';
        botonDecremento.disabled = true;
      } else {
        // Si el valor es mayor a 0, habilitamos decremento
        botonDecremento.style.fill = '';
        botonDecremento.disabled = false;
      }
    });
  }

  {% comment %} MARCAR OPCIONES PREDEFINIDAS CUANDO ES REQUERIDO {% endcomment %}
  function marcarOpcionesRequeridas() {
    getMenuItems().forEach((item, index) => {
      if (item.solicitud === 'Requerido') {
        const contenedorGrupo = document.getElementById(`menuItem-${index}`);
        
        // Caso 1: Radio buttons
        if (item.typeSelect === 'radio') {
          const primerRadio = contenedorGrupo.querySelector('input[type="radio"]');
          if (primerRadio) {
            primerRadio.checked = true;
          }
        }
        
        // Caso 2: Checkbox
        else if (item.typeSelect === 'checkbox') {
          const checkboxes = contenedorGrupo.querySelectorAll('input[type="checkbox"]');
          const limite = parseInt(item.limite);
          
          // Marcar los primeros checkboxes según el límite
          checkboxes.forEach((checkbox, i) => {
            if (i < limite) {
              checkbox.checked = true;
            }
          });
        }
        
        // Caso 3: NumberCount
        else if (item.typeSelect === 'numberCount') {
          const cantidadElementos = item.mainItems.length;
          const limite = parseInt(item.limite);
          const valorPorElemento = Math.floor(limite / cantidadElementos);
          const residuo = limite % cantidadElementos;
          
          item.mainItems.forEach((_, mainIndex) => {
            const display = document.getElementById(`cantidad-${index}-${mainIndex}`);
            if (display) {
              // Distribuir el límite entre todos los elementos
              let valor = valorPorElemento;
              if (mainIndex < residuo) {
                valor += 1; // Distribuir el residuo entre los primeros elementos
              }
              display.textContent = valor;
            }
          });
          
          // Actualizar estado de los botones después de establecer valores
          actualizarBotonesNumberCount(index);
        }
      }
    });
  }

  function verificarRequeridos() {
    getMenuItems().forEach((item, index) => {
      if (item.solicitud === 'Requerido') {
        const contenedorGrupo = document.getElementById(`menuItem-${index}`);
        const tituloBase1 = contenedorGrupo.parentElement.querySelector('.titulo-base1');
        const tituloBase2 = contenedorGrupo.parentElement.querySelector('.titulo-base2');
        const tituloSeleccion = contenedorGrupo.parentElement.querySelector('.titulo-detalle-seleccion');
        
        let faltaSeleccion = false;
        
        if (item.typeSelect === 'checkbox') {
          const checkboxesSeleccionados = contenedorGrupo.querySelectorAll('input[type="checkbox"]:checked').length;
          faltaSeleccion = checkboxesSeleccionados < item.limite;
          
          // Marcar elementos en rojo si falta selección
          const checkboxes = contenedorGrupo.querySelectorAll('.producto-nombre3');
          checkboxes.forEach(elem => {
            if (faltaSeleccion) {
              elem.style.setProperty('color', '#FF6565', 'important');
            } else {
              elem.style.removeProperty('color');
            }
          });
        }
        else if (item.typeSelect === 'numberCount') {
          const sumaTotal = obtenerSumaGrupo(index);
          faltaSeleccion = sumaTotal < item.limite;
          
          // Marcar elementos en rojo si falta selección
          const elementos = contenedorGrupo.querySelectorAll('.producto-nombre2');
          elementos.forEach(elem => {
            if (faltaSeleccion) {
              elem.style.setProperty('color', '#FF6565', 'important');
            } else {
              elem.style.removeProperty('color');
            }
          });
        }
        
        // Actualizar colores de los títulos
        if (faltaSeleccion) {
          tituloBase1.style.setProperty('color', '#FF6565', 'important');
          tituloBase2.style.setProperty('color', '#FF6565', 'important');
          tituloSeleccion.style.setProperty('color', '#FF6565', 'important');
        } else {
          tituloBase1.style.removeProperty('color');
          tituloBase2.style.removeProperty('color');
          tituloSeleccion.style.removeProperty('color');
        }
      }
    });
  }

  testPrueba()
    .then(resultado => {
      console.log('Todo salio bien');
    })
    .catch(error => {
        console.error('Error:', error);
    });
</script>
