<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    {{ content_for_header }}
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: Arial, sans-serif;
      }

      header {
        background-color: #333;
        color: #fff;
        padding: 10px;
        text-align: center;
      }

      footer {
        background-color: #333;
        color: #fff;
        padding: 10px;
        text-align: center;
        bottom: 0;
        width: 100%;
      }

      .banner-custom {
        background-color: #f0f0f0;
        color: #333;
        padding: 10px;
        text-align: center;
        display: flex;
        flex-direction: row;
        gap: 10px;
        justify-content: center;
        align-items: center;
        padding: auto;
      }

      .banner-custom p {
        margin: 0;
        padding: 0;
        font-size: 1.5rem;
        font-weight: bold;
      }

      .banner-custom button {
        background-color: #333;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      .coleccion-productos {
        background-color: #f0f0f0;
        color: #333;
        padding: 10px;
        text-align: center;
        width: 100%;
        height: 70vh;
        border-top: 1px solid #333;
        display: flex;
        flex-direction: column;
        gap: 10px;
        justify-content: top;
        align-items: center;
      }

      .sucursales-tienda {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
        align-items: center;
      }

      .sucursal-item {
        height: auto;
        width: 200px;
        background-color: #fff;
        color: #333;
        padding: 15px;
        display: flex;
        flex-direction: column;
        text-align: center;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
      }

      .sucursal-item-seleccionada {
        height: auto;
        width: 200px;
        background-color: #333;
        color: #fff;
        padding: 15px;
        display: flex;
        flex-direction: column;
        text-align: center;
        border-radius: 8px;
        border-color: #da1a32;
        box-shadow: 0 4px 12px rgba(218, 26, 50, 0.2);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
      }
    </style>
  </head>
  <body>
    {% comment %} HEADER {% endcomment %}
    <header>
      <p>HEADER</p>
    </header>

    {% comment %} BANNER {% endcomment %}
    <div class="banner-custom">
      <p>BANNER</p>
      <button onclick="verificarLocalSotrage()">ACCEDER UBICACION</button>
    </div>

    <!-- Este elemento es REQUERID por Shopify -->
    <main role="main">
      {% comment %} {{ content_for_layout }} {% endcomment %}
    </main>

    {% comment %} Coleccioness {% endcomment %}
    <section class="coleccion-productos">
      <h2>Sucursales</h2>
      <div class="sucursales-tienda"></div>
      <h2>Coleccion de Productos</h2>
      <div class="productos-items"></div>
    </section>

    {% comment %} FOOTER {% endcomment %}
    <footer>FOOTER</footer>

    {% comment %} BACKGROUND OVERLAY {% endcomment %}
    {% comment %}
      <div class="background-overlay-custom">
        <div class="background-cursor-wrapper">
          <div class="background-cursor-wrapper_outer">
            <div class="background-cursor-wrapper_inner">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20" height="20">
                <g class="nc-icon-wrapper" fill="#ffffff" transform="translate(0.5, 0.5)">
                    <line fill="none" stroke-width="6" x1="46" y1="2" x2="2" y2="46"/>
                    <line fill="none" stroke-width="6" x1="46" y1="46" x2="2" y2="2"/>
                </g>
              </svg>
            </div>
          </div>
        </div>
        <div class="window-solicitud-ubicacion">
          <div class="select-location">
            <img src="{{ 'logoPizzaHut.png' | asset_url }}" alt="Logo Superior" class="logo-superior">
            <p class="welcome-text">
              PERMÍTANOS ACCEDER A SU UBICACIÓN PARA MOSTRARLE OFERTAS Y PRODUCTOS DE SU SUCURSAL MÁS CERCANA.
            </p>
            <img src="{{ 'Logo-footer.svg' | asset_url }}" alt="Logo Inferior" class="logo-inferior">
          </div>
          <div class="options-buttons-location">
            <button class="btn-cancel">CANCELAR</button>
            <button class="btn-confirm">CONFIRMAR</button>
          </div>
        </div>
      </div>
    {% endcomment %}

    <!-- Scripts -->
    <script>
      console.log({{ shop.metafields.locations | json }});

      const bodega = [
        {
          id: 1,
          nombre: 'BANZER 3ER ANILLO',
          direccion: 'Tercer Anillo Externo',
          telefono: '78452415',
          coodenadas: [
            '-17.757619811485124, -63.178738886607285',
            '-17.75765499316851, -63.17862806006227',
            '-17.75774159514593, -63.178656476818574',
            '-17.757703707122307, -63.178764461706834',
          ],
        },
        {
          id: 2,
          nombre: 'BANZER KM 8.5',
          direccion: '8R2Q+2XH',
          telefono: '78452415',
          coodenadas: [
            '-17.700010201209256, -63.160219543801524',
            '-17.70001425690541, -63.16001091439781',
            '-17.70028399322846, -63.160006655825235',
            '-17.700277909382375, -63.160228058799945',
          ],
        },
        {
          id: 3,
          nombre: 'LAS PALMAS',
          direccion: 'Doble vía La Guardia',
          telefono: '78452415',
          coodenadas: [
            '-17.807739639953184, -63.204363371533816',
            '-17.807879040104435, -63.20423452558605',
            '-17.808018440776213, -63.20440046307397',
            '-17.80788833388888, -63.20452930894428',
          ],
        },
        {
          id: 4,
          nombre: 'SAN MARTIN',
          direccion: 'Av. San Martin 2200',
          telefono: '78452415',
          coodenadas: [
            '-17.758879666207005, -63.19948013726218',
            '-17.75874037624734, -63.199261908736986',
            '-17.758939362008405, -63.19914118651445',
            '-17.759078652124288, -63.19935941519224',
          ],
        },
        {
          id: 5,
          nombre: 'SANTOS DUMONT',
          direccion: 'Av Santos Dumont 3228',
          telefono: '78452415',
          coodenadas: [
            '-17.820341605927634, -63.184337508678894',
            '-17.820367373101746, -63.1842179677349',
            '-17.820558480382306, -63.184245033386134',
            '-17.82054559681319, -63.18436682994885',
          ],
        },
      ];

      const myTest = 'shpat_' + '45f4a7476152f4881d058f87ce063698';

      window.SHOP_ASSETS = {
        logoPizzaHut: "{{ 'logoPizzaHut.png' | asset_url }}",
        logoFooter: "{{ 'Logo-footer.svg' | asset_url }}",
      };

      async function getSucursales() {
        
        const query = `
          query {
            locations(first: 10) {
              edges {
                node {
                  id
                  name
                  address {
                    formatted
                  }
                }
              }
            }
          }
        `;
      
        try {
          const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Shopify-Access-Token': myTest
            },
            body: JSON.stringify({ query })
          });
      
          const data = await response.json();

          const sucursalesSimplificadas = data.data.locations.edges.map(edge => ({
            id: edge.node.id.split('/').pop(),
            nombre: edge.node.name,
            direccion: edge.node.address.formatted
          }));

          return sucursalesSimplificadas;

        } catch (error) {
          console.error('Error al obtener sucursales:', error);
          throw error;
        }
      }

      async function getProductosSucursal(sucursalId) {
      }

      (async function() {
        try {
          const sucursales = await getSucursales();
          console.log(sucursales);
        } catch (error) {
          console.error('Error:', error);
        }
      })();

      async function verificarLocalSotrage() {
        const localData = localStorage.getItem('cliente-coordenadas');
        const sucursales = await getSucursales();
        if (localData) {
          const data = JSON.parse(localData);
          const { latitud, longitud } = data;
          const coordenadas = `${latitud}, ${longitud}`;
          const bodegaCercana = encontrarBodegaMasCercana(coordenadas, bodega);
          console.log('Bodega más cercana:', bodegaCercana.nombre);
          console.log('Distancia:', bodegaCercana.distancia.toFixed(2), 'km');
          dibujarSucursales(sucursales,bodegaCercana);
        } else {
          // Verificamos si el navegador soporta geolocalización
          console.log('No hay datos en el local storage');
          if (!navigator.geolocation) {
            console.warn('Tu navegador no soporta geolocalización');
            return;
          }

          // Solicitamos la ubicación actual
          navigator.geolocation.getCurrentPosition((position) => {
            // Obtenemos la ubicación actual
            const ubicacionActual = {
              latitud: position.coords.latitude,
              longitud: position.coords.longitude,
            };

            const coordenadas = `${ubicacionActual.latitud}, ${ubicacionActual.longitud}`;
            const bodegaCercana = encontrarBodegaMasCercana(coordenadas, bodega);
            dibujarSucursales(sucursales,bodegaCercana);
            // Guardamos la ubicación en el local storag
            localStorage.setItem('cliente-coordenadas', JSON.stringify(ubicacionActual));
            console.log('Ubicación guardada en el local storage');
          },(error) => {
            console.error('Error obteniendo geolocalización:', error);
          });
        }
      }

      function dibujarSucursales(sucursales,designada){
        console.log('sucursales : ', sucursales);
        console.log('designada : ', designada);
          {% comment %}  {% endcomment %}
        const sucursalesTienda = document.querySelector('.sucursales-tienda');
        let itemSucursal = ``;

        sucursales.forEach((sucursal) => {

          if(sucursal.nombre == designada.nombre){
            itemSucursal += `
            <div class="sucursal-item-seleccionada">
              <h3>${sucursal.id}</h3>
              <p>${sucursal.nombre}</p>
              <p>${sucursal.direccion[0]}</p>
            </div>
          `;
          }else{
            itemSucursal += `
            <div class="sucursal-item">
              <h3>${sucursal.id}</h3>
              <p>${sucursal.nombre}</p>
              <p>${sucursal.direccion[0]}</p>
            </div>
          `;
          }
        });

        sucursalesTienda.innerHTML = itemSucursal;
      }

      // Función para convertir string de coordenadas a objeto {lat, lng}
      function parseCoordinates(coordString) {
        const [lat, lng] = coordString.split(',').map((num) => parseFloat(num.trim()));
        return { lat, lng };
      }

      // Función para calcular el centro de un polígono
      function calculatePolygonCenter(coordinates) {
        const points = coordinates.map((coord) => parseCoordinates(coord));
        const lat = points.reduce((sum, point) => sum + point.lat, 0) / points.length;
        const lng = points.reduce((sum, point) => sum + point.lng, 0) / points.length;
        return { lat, lng };
      }

      // Función para calcular la distancia entre dos puntos usando la fórmula de Haversine
      function calculateDistance(point1, point2) {
        const R = 6371; // Radio de la Tierra en kilómetros
        const dLat = ((point2.lat - point1.lat) * Math.PI) / 180;
        const dLon = ((point2.lng - point1.lng) * Math.PI) / 180;
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos((point1.lat * Math.PI) / 180) *
            Math.cos((point2.lat * Math.PI) / 180) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Distancia en kilómetros
      }

      // Función principal para encontrar la bodega más cercana
      function encontrarBodegaMasCercana(ubicacionUsuario, bodegas) {
        // Convertir la ubicación del usuario a objeto {lat, lng}
        const userPoint = parseCoordinates(ubicacionUsuario);

        // Calcular distancias a cada bodega
        const distancias = bodegas.map((bodega) => {
          const centro = calculatePolygonCenter(bodega.coodenadas);
          const distancia = calculateDistance(userPoint, centro);
          return {
            ...bodega,
            distancia,
          };
        });

        // Encontrar la bodega más cercana
        return distancias.reduce((nearest, current) => (current.distancia < nearest.distancia ? current : nearest));
      }
    </script>
  </body>
</html>
