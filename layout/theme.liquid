<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <script
      defer
      src="https://maps.googleapis.com/maps/api/js?key={{settings.keyGoogleMap}}&libraries=places"
    ></script>

    {{ content_for_header }}
    <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        body {
          font-family: Arial, sans-serif;
        }

        header {
          background-color: #333;
          color: #fff;
          padding: 10px;
          text-align: center;
        }

        footer {
          background-color: #333;
          color: #fff;
          padding: 10px;
          text-align: center;
          bottom: 0;
          width: 100%;
        }

        .banner-custom {
          background-color: #f0f0f0;
          color: #333;
          padding: 10px;
          text-align: center;
          display: flex;
          flex-direction: row;
          gap: 10px;
          justify-content: center;
          align-items: center;
          padding: auto;
        }

        .banner-custom p {
          margin: 0;
          padding: 0;
          font-size: 1.5rem;
          font-weight: bold;
        }

        .banner-custom button {
          background-color: #333;
          color: #fff;
          padding: 10px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        }

        .coleccion-productos {
          background-color: #f0f0f0;
          color: #333;
          padding: 10px;
          text-align: center;
          width: 100%;
          height: 80vh;
          border-top: 1px solid #333;
          display: flex;
          flex-direction: column;
          gap: 10px;
          justify-content: flex-start;
          align-items: center;
        }

        .sucursales-tienda {
          display: flex;
          flex-direction: row;
          flex-wrap: wrap;
          gap: 10px;
          justify-content: center;
          align-items: center;
        }

        .sucursal-item {
          height: auto;
          width: 200px;
          background-color: #fff;
          color: #333;
          padding: 15px;
          display: flex;
          flex-direction: column;
          text-align: center;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
          cursor: pointer;
          border: 2px solid transparent;
        }

        .sucursal-item-seleccionada {
          height: auto;
          width: 200px;
          background-color: #333;
          color: #fff;
          padding: 15px;
          display: flex;
          flex-direction: column;
          text-align: center;
          border-radius: 8px;
          border-color: #da1a32;
          box-shadow: 0 4px 12px rgba(218, 26, 50, 0.2);
          transition: all 0.3s ease;
          cursor: pointer;
          border: 2px solid transparent;
        }
        .productos-items {
          width: 100%;
          overflow: auto;
        }
        .productos-lista {
          list-style: none;
          padding: 0;
          margin: 20px;
        }
        .producto-item {
          background: #f5f5f5;
          padding: 10px;
          margin-bottom: 10px;
          border-radius: 4px;
        }
        .producto-info {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .producto-nombre {
          font-weight: bold;
        }
        .producto-stock {
          color: #666;
        }
        .producto-id {
          color: #999;
          font-size: 12px;
        }

        .background-overlay button{
          border: none;
          background-color: transparent;
          cursor: pointer;
          padding: 8px;
          display: flex;
          align-items: center;
          justify-content: center;
          width: 40px;
          height: 40px;
        }

        .background-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background-color: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
          overflow-y: hidden !important;
          {% comment %} display: none; {% endcomment %}
        }

        .modal-solicitud-ubicacion {
          background-color: #fff;
          padding: 20px;
          border-radius: 2px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
          width: 50%;
          height: auto;
        }

        .head-modal {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .body-modal{
          display: flex;
          flex-direction: column;
          padding: 10px;
          border-top: 1px solid #333;
          padding-bottom: 10px;
        }

        .body-mensaje-2,
        .body-mensaje-1 {
          display: flex;
              flex-direction: row;
              justify-content: start;
              gap: 10px;
              align-items: center;
        }

        .body-mapa{
          height: 300px;
          width: 100%;
          background-color: #f0f0f0;
        }

        .footer-modal{
          display: flex;
          justify-content: center;
          gap: 20px;
          align-items: center;
          padding-top: 10px;
          border-top: 1px solid #333;
        }

        .footer-modal button {
          width: auto;
          background-color: #ffffff;
          color: #1a1a1a;
          padding: 12px 24px;
          border: 2px solid #1a1a1a;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 600;
          font-size: 14px;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          transition: all 0.3s ease;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .footer-modal button:hover {
          background-color: #1a1a1a;
          color: #ffffff;
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }
    </style>
  </head>
  <body>
    {% comment %} HEADER  R {% endcomment %}
    <header>
      <p>HEADER</p>
    </header>

    {% comment %} BANNER {% endcomment %}
    <div class="banner-custom">
      <p>BANNER</p>
      <button onclick="verificarLocalStorage()">ACCEDER UBICACION</button>
    </div>

    <!-- Este elemento es REQUERID por Shopify -->
    <main role="main">
      {% comment %} {{ content_for_layout }} {% endcomment %}
    </main>

    {% comment %} Coleccioness {% endcomment %}
    <section class="coleccion-productos">
      <h2>Sucursales</h2>
      <div class="sucursales-tienda"></div>
      <h2>Coleccion de Productos</h2>
      <div class="productos-items">
        <ul class="productos-lista"></ul>
      </div>
    </section>

    {% comment %} FOOTER {% endcomment %}
    <footer>FOOTER</footer>

    {% comment %} BACKGROUND OVERLA {% endcomment %}
    {% comment %}
      <div class="background-overlay-custom">
        <div class="background-cursor-wrapper">
          <div class="background-cursor-wrapper_outer">
            <div class="background-cursor-wrapper_inner">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" width="20" height="20">
                <g class="nc-icon-wrapper" fill="#ffffff" transform="translate(0.5, 0.5)">
                    <line fill="none" stroke-width="6" x1="46" y1="2" x2="2" y2="46"/>
                    <line fill="none" stroke-width="6" x1="46" y1="46" x2="2" y2="2"/>
                </g>
              </svg>
            </div>
          </div>
        </div>
        <div class="window-solicitud-ubicacion">
          <div class="select-location">
            <img src="{{ 'logoPizzaHut.png' | asset_url }}" alt="Logo Superior" class="logo-superior">
            <p class="welcome-text">
              PERMÍTANOS ACCEDER A SU UBICACIÓN PARA MOSTRARLE OFERTAS Y PRODUCTOS DE SU SUCURSAL MÁS CERCANA.
            </p>
            <img src="{{ 'Logo-footer.svg' | asset_url }}" alt="Logo Inferior" class="logo-inferior">
          </div>
          <div class="options-buttons-location">
            <button class="btn-cancel">CANCELAR</button>
            <button class="btn-confirm">CONFIRMAR</button>
          </div>
        </div>
      </div>
    {% endcomment %}

    <div class="background-overlay">
      <div class="modal-solicitud-ubicacion">
        <div class="head-modal">
          <span>¿Dónde te encuentras?</span>
          <button style="border: none; background-color: transparent; cursor: pointer; padding: 8px; display: flex; align-items: center; justify-content: center; width: 40px; height: 40px;">
            {% render 'icon-close' %}
          </button>
        </div>
        <div class="body-modal">
          <div class="body-mensaje-1">
            <span>Tu ubicacion en el mapa</span>
            <button>Ver</button>
          </div>
          <div style="display: none;" class="body-mensaje-2">
            <span>Habilita tu ubicacion</span>
            <button>Icono</button>
          </div>
          <div class="body-mapa"></div>
        </div>
        <div class="footer-modal">
          <button>Ubicacion Actual</button>
          <button>Confirmar Punto</button>
        </div>
      </div>
    </div>

    <!-- Scripts -->
    <script>

      const bodega = [
        {
          id: 1,
          nombre: 'BANZER 3ER ANILLO',
          direccion: 'Tercer Anillo Externo',
          telefono: '78452415',
          coodenadas: [
            '-17.757619811485124, -63.178738886607285',
            '-17.75765499316851, -63.17862806006227',
            '-17.75774159514593, -63.178656476818574',
            '-17.757703707122307, -63.178764461706834',
          ],
        },
        {
          id: 2,
          nombre: 'BANZER KM 8.5',
          direccion: '8R2Q+2XH',
          telefono: '78452415',
          coodenadas: [
            '-17.700010201209256, -63.160219543801524',
            '-17.70001425690541, -63.16001091439781',
            '-17.70028399322846, -63.160006655825235',
            '-17.700277909382375, -63.160228058799945',
          ],
        },
        {
          id: 3,
          nombre: 'LAS PALMAS',
          direccion: 'Doble vía La Guardia',
          telefono: '78452415',
          coodenadas: [
            '-17.807739639953184, -63.204363371533816',
            '-17.807879040104435, -63.20423452558605',
            '-17.808018440776213, -63.20440046307397',
            '-17.80788833388888, -63.20452930894428',
          ],
        },
        {
          id: 4,
          nombre: 'SAN MARTIN',
          direccion: 'Av. San Martin 2200',
          telefono: '78452415',
          coodenadas: [
            '-17.758879666207005, -63.19948013726218',
            '-17.75874037624734, -63.199261908736986',
            '-17.758939362008405, -63.19914118651445',
            '-17.759078652124288, -63.19935941519224',
          ],
        },
        {
          id: 5,
          nombre: 'SANTOS DUMONT',
          direccion: 'Av Santos Dumont 3228',
          telefono: '78452415',
          coodenadas: [
            '-17.820341605927634, -63.184337508678894',
            '-17.820367373101746, -63.1842179677349',
            '-17.820558480382306, -63.184245033386134',
            '-17.82054559681319, -63.18436682994885',
          ],
        },
      ];

      const myTest = 'shpat_' + '45f4a7476152f4881d058f87ce063698';

      window.SHOP_ASSETS = {
        logoPizzaHut: "{{ 'logoPizzaHut.png' | asset_url }}",
        logoFooter: "{{ 'Logo-footer.svg' | asset_url }}",
      };

      async function getSucursales() {
        
        const query = `
          query {
            locations(first: 10) {
              edges {
                node {
                  id
                  name
                  address {
                    formatted
                  }
                }
              }
            }
          }
        `;
      
        try {
          const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Shopify-Access-Token': myTest
            },
            body: JSON.stringify({ query })
          });
      
          const data = await response.json();

          if (!data?.data?.locations?.edges) {
            throw new Error('Formato de respuesta inválido');
          }

          const sucursalesSimplificadas = data.data.locations.edges.map(edge => ({
            id: edge.node.id,
            nombre: edge.node.name,
            direccion: edge.node.address.formatted
          }));

          console.log('Sucursales :',sucursalesSimplificadas);

          return sucursalesSimplificadas;

        } catch (error) {
          console.error('Error al obtener sucursales:', error);
          throw error;
        }
      }

      async function getProductosSucursal(locationId) {
        {% comment %} location(id: "gid://shopify/Location/103470498076") { {% endcomment %}

        const query = `
          query {
            location(id: "${locationId}") {
              id
              name
              inventoryLevels(first: 100) {
                edges {
                  node {
                    quantities(names: ["available"]) {
                      quantity
                    }
                    item {
                      variant {
                        product {
                          id
                          title
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        `;
    
        try {
            const response = await fetch('https://pizza-hut-bo.myshopify.com/admin/api/2025-01/graphql.json', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Shopify-Access-Token': myTest
                },
                body: JSON.stringify({ query })
            });
    
            if (!response.ok) {
                throw new Error('Error en la respuesta de la API');
            }
    
            const data = await response.json();
            
            // Transformar los datos al formato deseado
            const productos = data.data.location.inventoryLevels.edges.map(edge => ({
                id: edge.node.item.variant.product.id,
                nombre: edge.node.item.variant.product.title,
                stock: edge.node.quantities[0].quantity
            }));

            console.log('Porductos Sucursal Desiganada',productos);
    
            return productos;
    
        } catch (error) {
            console.error('Error al obtener productos de la sucursal:', error);
            throw error;
        }
      }
      
      {% comment %} (async function() {
        try {
          {% comment %} const sucursales = await getSucursales();
          console.log(sucursales); {% endcomment %}
          {% comment %} asdsa {% endcomment %}
          const locationId = "gid://shopify/Location/103470498076";
          const inventario = await getProductosSucursal(locationId);
          console.log(inventario);
          
        } catch (error) {
          console.error('Error:', error);
        }
      })(); {% endcomment %}

      async function verificarLocalStorage() {
        try {
          const localData = localStorage.getItem('cliente-coordenadas');
          const sucursales = await getSucursales();
      
          if (localData) {
            try {
              const data = JSON.parse(localData);
              const { latitud, longitud } = data;
              const coordenadas = `${latitud}, ${longitud}`;
              const bodegaCercana = encontrarBodegaMasCercana(coordenadas, bodega);
              console.log('Bodega más cercana:', bodegaCercana.nombre);
              console.log('Distancia:', bodegaCercana.distancia.toFixed(2), 'km');
              console.log('coordenadas :',coordenadas);
              dibujarSucursales(sucursales, bodegaCercana);
            } catch (error) {
              console.error('Error al procesar datos del localStorage:', error);
              localStorage.removeItem('cliente-coordenadas');
              // Reintentar sin datos en localStorage mucho
              verificarLocalStorage();
            }
          } else {
            console.log('No hay datos en el local storage');
            if (!navigator.geolocation) {
              console.warn('Tu navegador no soporta geolocalización');
              return;
            }
      
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const ubicacionActual = {
                  latitud: position.coords.latitude,
                  longitud: position.coords.longitude,
                };
      
                const coordenadas = `${ubicacionActual.latitud}, ${ubicacionActual.longitud}`;
                const bodegaCercana = encontrarBodegaMasCercana(coordenadas, bodega);
                dibujarSucursales(sucursales, bodegaCercana);
                console.log('Bodega más cercana:', bodegaCercana.id);
                console.log('coordenadas :',coordenadas);
                localStorage.setItem('cliente-coordenadas', JSON.stringify(ubicacionActual));
                console.log('Ubicación guardada en el local storage');
              },
              (error) => {
                console.error('Error obteniendo geolocalización:', error);
                // Aquí podrías mostrar un mensaje al usuario o usar una ubicación por defecto
              }
            );
          }
        } catch (error) {
          console.error('Error en verificarLocalStorage:', error);
        }
      }

      function dibujarSucursales(sucursales,designada){
        const sucursalesTienda = document.querySelector('.sucursales-tienda');
        let itemSucursal = ``;

        sucursales.forEach((sucursal) => {
          const idFormateado = sucursal.id.split('/').pop();

          if(sucursal.nombre == designada.nombre){
            dibujarProductoSucursal(sucursal.id);

            itemSucursal += `
            <div class="sucursal-item-seleccionada">
              <h3>${idFormateado}</h3>
              <p>${sucursal.nombre}</p>
              <p>${sucursal.direccion[0]}</p>
            </div>
          `;
          }else{
            itemSucursal += `
            <div class="sucursal-item">
              <h3>${idFormateado}</h3>
              <p>${sucursal.nombre}</p>
              <p>${sucursal.direccion[0]}</p>
            </div>
          `;
          }
        });

        sucursalesTienda.innerHTML = itemSucursal;
      }

      async function dibujarProductoSucursal(idSucursal){
        const contenedorTrabajo = document.querySelector('.productos-lista');
        const productosSucursal = await getProductosSucursal(idSucursal);
        let itemSucursal = ``;

        productosSucursal.forEach((producto) => {
          itemSucursal += `
            <li class="producto-item">
              <div class="producto-info">
                <span class="producto-nombre">${producto.nombre}</span>
                <span class="producto-stock">Stock: ${producto.stock}</span>
                <small class="producto-id">ID: ${producto.id}</small>
              </div>
            </li>
          `;
        });

        contenedorTrabajo.innerHTML = itemSucursal;
      }

      // Función para convertir string de coordenadas  objeto {lat, lng}
      function parseCoordinates(coordString) {
        const [lat, lng] = coordString.split(',').map((num) => parseFloat(num.trim()));
        return { lat, lng };
      }

      // Función para calcular el centro de un polígono
      function calculatePolygonCenter(coordinates) {
        const points = coordinates.map((coord) => parseCoordinates(coord));
        const lat = points.reduce((sum, point) => sum + point.lat, 0) / points.length;
        const lng = points.reduce((sum, point) => sum + point.lng, 0) / points.length;
        return { lat, lng };
      }

      // Función para calcular la distancia entre dos puntos usando la fórmula de Haversine
      function calculateDistance(point1, point2) {
        const R = 6371; // Radio de la Tierra en kilómetros
        const dLat = ((point2.lat - point1.lat) * Math.PI) / 180;
        const dLon = ((point2.lng - point1.lng) * Math.PI) / 180;
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos((point1.lat * Math.PI) / 180) *
            Math.cos((point2.lat * Math.PI) / 180) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Distancia en kilómetros
      }

      // Función principal para encontrar la bodega más cercana
      function encontrarBodegaMasCercana(ubicacionUsuario, bodegas) {
        // Convertir la ubicación del usuario a objeto {lat, lng}
        const userPoint = parseCoordinates(ubicacionUsuario);

        // Calcular distancias a cada bodega
        const distancias = bodegas.map((bodega) => {
          const centro = calculatePolygonCenter(bodega.coodenadas);
          const distancia = calculateDistance(userPoint, centro);
          return {
            ...bodega,
            distancia,
          };
        });

        // Encontrar la bodega más cercana
        return distancias.reduce((nearest, current) => (current.distancia < nearest.distancia ? current : nearest));
      }

      // Inicializacion del Mapa
      function initMap(){
        const elementoMapa = document.querySelector('.body-mapa');
        const pizzaLocations = [
          { lat: -17.757619, lng: -63.178738, name: 'BANZER 3ER ANILLO' },
          { lat: -17.700010, lng: -63.160219, name: 'BANZER KM 8.5' },
          { lat: -17.807739, lng: -63.204363, name: 'LAS PALMAS' },
          { lat: -17.758879, lng: -63.199480, name: 'SAN MARTIN' },
          { lat: -17.820341, lng: -63.184337, name: 'SANTOS DUMONT' }
        ];
        let userMarker; // Marcador del usuario
        let dragMarker; // Marcador arrastrable

        if(navigator.geolocation){
          navigator.geolocation.getCurrentPosition((position) => {

            const usuarioLocalizacion = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            console.log('Ubicación del usuario:', usuarioLocalizacion);

            // Crear mapa centrado en la ubicación del usuario
            const map = new google.maps.Map(elementoMapa, {
              center: usuarioLocalizacion,
              zoom: 13,
              mapTypeControl: true,
              fullscreenControl: true,
              streetViewControl: true,
              zoomControl: true,
              mapTypeId: google.maps.MapTypeId.ROADMAP,
            });

            // 1. Marcador de ubicación del usuario (estándar)
            userMarker = new google.maps.Marker({
              position: usuarioLocalizacion,
              map: map,
              title: 'Tu ubicación actual',
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 10,
                fillColor: '#4285F4',
                fillOpacity: 1,
                strokeColor: '#FFFFFF',
                strokeWeight: 2
              },
              zIndex: 2
            });

             // Marcadores de las pizzerías con imagen personalizada
            const pizzaIcon = {
              url: "{{ 'logo-pizza-map.png' | asset_url }}",
              scaledSize: new google.maps.Size(40, 40),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(20, 40)
            };

            pizzaLocations.forEach(location => {
              const marker = new google.maps.Marker({
                position: { lat: location.lat, lng: location.lng },
                map: map,
                title: location.name,
                icon: pizzaIcon,
                animation: google.maps.Animation.DROP
              });
              
              const infoWindow = new google.maps.InfoWindow({
                content: `<div style="text-align:center;padding:5px;">
                          <strong>${location.name}</strong><br>
                          <small>Pizza Hut</small>
                         </div>`
              });
              
              marker.addListener('click', () => {
                infoWindow.open(map, marker);
              });
            });

            // 3. Marcador arrastrable para que el usuario elija una ubicación
            dragMarker = new google.maps.Marker({
              position: usuarioLocalizacion,
              map: map,
              draggable: true,
              animation: google.maps.Animation.BOUNCE,
              title: 'Arrastrame para seleccionar ubicación',
              icon: {
                path: google.maps.SymbolPath.MARKER,
                fillColor: '#FF0000',
                fillOpacity: 1,
                strokeWeight: 2,
                strokeColor: '#FFFFFF',
                scale: 12
              },
              zIndex: 3
            });
            
            // Eventos para el marcador arrastrable
            dragMarker.addListener('dragstart', () => {
              dragInfoWindow.close();
            });
            
            dragMarker.addListener('dragend', () => {
              const position = dragMarker.getPosition();
              const lng = position.lng();
              
              console.log('Nueva ubicación seleccionada:', { lat, lng });
              
            });

          }, (error) => {
            console.error('Error al obtener la ubicación:', error);
          });
        
        }else{
          // Mensaje del navegador al cliente
          const mensaje1 = document.querySelector('.body-mensaje-1');
          const mensaje2 = document.querySelector('.body-mensaje-2');

          // Ocultar mensaje 1 y quitarle el style none al mensaje 2
          mensaje1.style.display = 'none';
          mensaje2.style.display = 'flex';


        }
      }

      document.addEventListener('DOMContentLoaded', function() {
        initMap();
      });
    </script>
  </body>
</html>
